<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Java on Jeonghun's blog</title><link>https://jeonghun-ban.github.io/tags/java/</link><description>Recent content in Java on Jeonghun's blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>junghoon.ban@gmail.com (Jeonghun)</managingEditor><webMaster>junghoon.ban@gmail.com (Jeonghun)</webMaster><copyright>©2021, All Rights Reserved</copyright><lastBuildDate>Mon, 19 Jul 2021 13:03:57 +0000</lastBuildDate><atom:link href="https://jeonghun-ban.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>[Java] 반복문을 파이프라인으로 바꿔라</title><link>https://jeonghun-ban.github.io/posts/java/refactoring-loops-to-collection-pipelines/</link><pubDate>Mon, 19 Jul 2021 13:03:57 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Mon, 19 Jul 2021 13:03:57 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/java/refactoring-loops-to-collection-pipelines/</guid><description>코딩테스트를 준비하면서 프로그래머스에서 제공하는 문제들을 다시 풀어보고 있다. 완주하지 못한 선수라는 문제를 풀던 중, 문득 리팩터링이라는 책에서 반복문을 파</description><dc:creator>Jeonghun</dc:creator><category>Java</category><category>refactoring</category><category>스트림</category><category>파이프라인</category><category>코딩테스트</category><category>Java</category><category>자바 스터디</category></item><item><title>[Java] 기본 자료형과 참조 자료형</title><link>https://jeonghun-ban.github.io/posts/java/primitive-type-and-reference-type/</link><pubDate>Fri, 16 Jul 2021 14:06:26 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Fri, 16 Jul 2021 14:06:26 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/java/primitive-type-and-reference-type/</guid><description>자료형 종류 자료형은 크게 기본 자료형과 참조 자료형으로 나누어진다. 이번 포스팅에서는 자바 프로그래밍에 있어서 기초가 되는 자료형에 한해서만 알아보기로 한다.</description><dc:creator>Jeonghun</dc:creator><category>Java</category><category>자료형</category><category>기본 자료형</category><category>참조 자료형</category><category>Java</category><category>자바 스터디</category></item><item><title>[UML 2.0] 순차 다이어그램(Sequence Diagram)</title><link>https://jeonghun-ban.github.io/posts/uml/sequence-diagram/</link><pubDate>Sat, 23 Jan 2021 16:10:03 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sat, 23 Jan 2021 16:10:03 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/uml/sequence-diagram/</guid><description>객체들의 상호작용을 나타내는 다이어그램 중 하나로 객체들 사이의 메시지 송신과 그들의 순서를 나타낸다. 구성요소 객체 가장 윗부분에 표현 왼쪽에서 오른쪽으로 객체</description><dc:creator>Jeonghun</dc:creator><category>UML</category><category>OOP</category><category>Java</category><category>UML</category><category>객체 지향 설계</category></item><item><title>[UML 2.0] 컬레보레이션 다이어그램(Collaboration Diagram)</title><link>https://jeonghun-ban.github.io/posts/uml/collaboration-diagram/</link><pubDate>Sat, 16 Jan 2021 18:48:45 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sat, 16 Jan 2021 18:48:45 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/uml/collaboration-diagram/</guid><description>UML 2.0에서 디자인 패턴을 표현하는 도구 객체들이 특정 상황에서 수행하는 역할의 상호작용을 작성 UML 1.X에서 사용되던 컬레보레이션 다이어그램은 2.0에서 통</description><dc:creator>Jeonghun</dc:creator><category>UML</category><category>OOP</category><category>Java</category><category>UML</category><category>객체 지향 설계</category></item><item><title>[OOP] 객체지향 설계 원칙: SOLID 원칙</title><link>https://jeonghun-ban.github.io/posts/oop/solid-principle/</link><pubDate>Sun, 10 Jan 2021 19:53:10 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sun, 10 Jan 2021 19:53:10 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/oop/solid-principle/</guid><description>단일 책임 원칙(SRP) 단일 책임 원칙(Single Responsiblity Principle, SRP): 단 하나의 책임만 가져야 한다는 원칙 책임의 의미 SRP에서 말하는 책임의 기본 단위는 객체를 지칭한다</description><dc:creator>Jeonghun</dc:creator><category>OOP</category><category>JAVA</category><category>OOP</category><category>객체지향 개념</category></item><item><title>[OOP] 객체지향 프로그래밍(OOP) 특징</title><link>https://jeonghun-ban.github.io/posts/oop/oop-features/</link><pubDate>Sat, 09 Jan 2021 17:18:32 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sat, 09 Jan 2021 17:18:32 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/oop/oop-features/</guid><description>추상화(Abstraction) 구체적인 사물들의 공통적인 특징을 파악해서 하나의 개념으로 다루는 수단이다. 즉 복잡한 자료, 모듈, 시스템 등으로부터 핵심</description><dc:creator>Jeonghun</dc:creator><category>OOP</category><category>Java</category><category>OOP</category><category>객체지향 개념</category></item><item><title>[UML 2.0] 클래스 다이어그램(Class Diagram)</title><link>https://jeonghun-ban.github.io/posts/uml/class-diagram/</link><pubDate>Fri, 08 Jan 2021 19:20:43 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Fri, 08 Jan 2021 19:20:43 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/uml/class-diagram/</guid><description>클래스란? 클래스는 동일한 속성과 행위를 수행하는 객체들의 집합이다. 예를 들어 소프트웨어를 전공중인 학생들의 공통점은 소프트웨어를 전공한다는 사실과 동일한</description><dc:creator>Jeonghun</dc:creator><category>UML</category><category>OOP</category><category>Java</category><category>Class</category><category>Modeling</category><category>UML</category><category>객체 지향 설계</category></item></channel></rss>