<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jeonghun-Ban – 군대에서 코딩하기</title><link>http://Jeonghun-Ban.github.io/tags/%EA%B5%B0%EB%8C%80%EC%97%90%EC%84%9C-%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0/</link><description>Recent content in 군대에서 코딩하기 on Jeonghun-Ban</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Thu, 03 Dec 2020 04:34:19 +0000</lastBuildDate><atom:link href="http://Jeonghun-Ban.github.io/tags/%EA%B5%B0%EB%8C%80%EC%97%90%EC%84%9C-%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: code-server를 이용해서 웹 IDE 구축하기</title><link>http://Jeonghun-Ban.github.io/post/build-web-ide-using-code-server/</link><pubDate>Thu, 03 Dec 2020 04:34:19 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/post/build-web-ide-using-code-server/</guid><description>
&lt;h2 id="서론">서론&lt;/h2>
&lt;p>최근 웹으로 접속하는 개발환경인 &lt;code>Web IDE&lt;/code>가 활발하게 활용되고 있다. 대표적으로 &lt;code>Cloud9&lt;/code>, &lt;code>Codeanywhere&lt;/code>, &lt;code>구름IDE&lt;/code> 등이 있는데, 깃헙에서도 &lt;a href="https://github.com/features/codespaces">Codespace&lt;/a>라는 이름으로 비슷한 서비스를 준비중에 있다. 나는 VSCode를 웹에서 바로 사용 가능하다는 점이 마음에 들어 미리보기를 신청했으나 아쉽게도 당첨되지 않았다..&lt;/p>
&lt;p>그래서 방법을 찾던 중 &lt;code>code-server&lt;/code>이라는 오픈소스를 찾게 되었다. 해당 서비스는 VS Code를 웹 서버에서 동작할 수 있게 하는 프로젝트이다. &lt;code>MIT 라이선스&lt;/code>로 제공되는 오픈 소스인 만큼 조건 없이 사용 가능하다는 것도 장점이다. 군대에서 제약없이 코딩하고자 하는 나에게 있어서 최고의 선택지였다.&lt;/p>
&lt;h2 id="개발-환경-구축">개발 환경 구축&lt;/h2>
&lt;p>서론이 길었던 것 만큼 설치과정이 길거라고 생각한다면 그것은 큰 착각이다. 설치는 매우 간단하다. 다른 블로그 글을 참고해서 설치해보기도 했지만, 여타 방법보다는 &lt;a href="https://github.com/cdr/code-server">github repo&lt;/a>에 나와있는 설치법이 더 쉽고 빠르게 할 수 있다.&lt;/p>
&lt;h3 id="설치-및-실행">설치 및 실행&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -fsSL https://code-server.dev/install.sh | sh
sudo systemctl enable --now code-server@$USER &lt;span style="color:#75715e"># 시스템 부팅 시 자동실행 등록&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 코드를 실행하면 &lt;code>code-server&lt;/code>를 설치하고 시스템 부팅 시 자동실행이 가능하도록 등록하는 과정까지 마치게 된다. 동시에 &lt;code>code-server&lt;/code>는 이미 동작 중에 있겠지만 바로 사용할 수는 없는데, 이는 기본적으로 &lt;code>localhost(127.0.0.1)&lt;/code>의 접속만 허용하기 때문이다. 따라서 외부에서 접속 가능하게 하는 설정이 필요하다.&lt;/p>
&lt;h3 id="외부-접속-허용-및-비밀번호-설정">외부 접속 허용 및 비밀번호 설정&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">vi ~/.config/code-server/config.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>기본적으로 &lt;code>code-server&lt;/code>의 설정 파일은 위 경로에 위치한 &lt;code>config.yaml&lt;/code> 파일이다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">bind-addr&lt;/span>: &lt;span style="color:#ae81ff">0.0.0.0&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;span style="color:#f92672">auth&lt;/span>: &lt;span style="color:#ae81ff">password&lt;/span>
&lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#75715e">#설정할 비밀번호 입력&lt;/span>
&lt;span style="color:#f92672">cert&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>bind-addr&lt;/code>: 해당 서비스 주소&lt;/li>
&lt;li>&lt;code>auth&lt;/code>: 패스워드 설정 여부&lt;/li>
&lt;li>&lt;code>password&lt;/code>: 패스워드 지정&lt;/li>
&lt;li>&lt;code>cert&lt;/code>: 인증서 설정&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>bind-addr&lt;/code>값을 &lt;code>127.0.0.1&lt;/code>에서 &lt;code>0.0.0.0&lt;/code>으로 변경하는 것은 외부에서 접속하는 것도 허용함을 의미한다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo systemctl restart code-server@$USER
&lt;/code>&lt;/pre>&lt;/div>&lt;p>모든 설정이 완료되었다면 &lt;code>code-server&lt;/code>를 재실행해준다. 이제 브라우저에서 &lt;code>ip-address:8080&lt;/code>으로 접속할 수 있게 되었다. 포트 번호를 넣지 않고 주소만으로 접속하고 싶다면 아래도 이어서 따라와주길 바란다.&lt;/p>
&lt;h3 id="nginx-구축">Nginx 구축&lt;/h3>
&lt;p>&lt;code>Nginx&lt;/code>는 &lt;code>Apache&lt;/code>와 같은 웹 서버 소프트웨어이다. 아파치가 이전에 많이 사용되었다면 최근 만들어지는 프로젝트의 다수는 Nginx로 구성하는 추세이다. 가벼우면서도 아차피보다 더 많은 프로세스를 감당할 수 있다는 장점도 있다.&lt;/p>
&lt;p>이 Nginx는 &lt;code>포워드 프록시&lt;/code>라는 기능을 제공하는데 이를 활용하면 서버 ip주소만으로 서비스 포트가 8080인 &lt;code>code-server&lt;/code>를 접속할 수 있다.&lt;/p>
&lt;h4 id="bind-addr-초기화">bind-addr 초기화&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">vi ~/.config/code-server/config.yaml &lt;span style="color:#75715e"># bind-addr: 127.0.0.1:8080&lt;/span>
sudo systemctl restart code-server@$USER
&lt;/code>&lt;/pre>&lt;/div>&lt;p>해당 과정을 위해서는 &lt;code>code-server&lt;/code>의 &lt;code>bind-addr&lt;/code>를 localhost로 다시 설정해주어야 한다.&lt;/p>
&lt;h4 id="nginx-설치">Nginx 설치&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo apt install -y nginx
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="etcnginxsites-availablecode-server-파일에-아래-설정-추가sudo-권한">&lt;code>/etc/nginx/sites-available/code-server&lt;/code> 파일에 아래 설정 추가(sudo 권한)&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#e6db74">[::]:80&lt;/span>;
&lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">mydomain.com&lt;/span>; &lt;span style="color:#75715e"># 도메인이 있다면 변경
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://localhost:8080/&lt;/span>;
&lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Host&lt;/span> $host;
&lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Upgrade&lt;/span> $http_upgrade;
&lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Connection&lt;/span> &lt;span style="color:#e6db74">upgrade&lt;/span>;
&lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Accept-Encoding&lt;/span> &lt;span style="color:#e6db74">gzip&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>80번 포트로 listen하고 해당 프록시를 localhost의 8080 포트로 pass하는 설정이다.&lt;/p>
&lt;/blockquote>
&lt;h4 id="설정-적용">설정 적용&lt;/h4>
&lt;pre>&lt;code>sudo rm /etc/nginx/sites-enabled/default
sudo ln -s ../sites-available/code-server /etc/nginx/sites-enabled/code-server
sudo systemctl reload nginx.service
&lt;/code>&lt;/pre>&lt;p>설정이 제대로 적용되었다면 이후부터는 ip주소만으로 브라우저에서 &lt;code>code-server&lt;/code>을 이용할 수 있게 된다.&lt;/p>
&lt;h3 id="버전-업데이트">버전 업데이트&lt;/h3>
&lt;p>이 포스팅을 쓰는 도중에도 코드 서버는 &lt;code>v3.7.3&lt;/code>에서 &lt;code>v3.7.4&lt;/code>로 버전 업데이트가 이루어졌다. 몇 가지 버그 픽스와 기능 추가가 있는 작은 업데이트이었지만 &lt;code>code-server&lt;/code>는 접속할 때마다 새로운 버전이 나왔음을 알려주었다. 버전을 업데이트하는 방법은 매우 간단하다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -fsSL https://code-server.dev/install.sh | sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>설치할 때 사용한 코드를 동일하게 실행해주면 바로 적용된다. 이렇게 지속적으로 빠르게 업데이트가 되는 것은 이 프로젝트가 오픈 소스이기 때문에 얻을 수 있는 큰 장점이다. 이렇게 좋은 개발환경을 무료로 자유로이 사용할 수 있다는 것에 감사하고 있다.&lt;/p>
&lt;h2 id="추가적인-설정">추가적인 설정&lt;/h2>
&lt;p>이렇게 해서 개인 서버에 &lt;code>code-server&lt;/code>를 설치해서 웹 브라우저를 통해 접속할 수 있는 환경을 만들어 보았다. 공식 문서에서는 추가적으로 &lt;code>Nginx&lt;/code> 등을 활용하여 https 통신으로 암호화하는 것을 권장하는데, 자세한 내용은 &lt;a href="https://github.com/cdr/code-server/blob/v3.7.4/doc/guide.md">여기&lt;/a>를 통해 볼 수 있다. 해당 방법은 도메인네임이 있어야만 하므로 해당 비용을 감수하기 싫다면 굳이 진행하지 않아도 무관하다.&lt;/p></description></item><item><title>Post: GCP 인스턴스 만들기</title><link>http://Jeonghun-Ban.github.io/post/create-gcp-instance/</link><pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/post/create-gcp-instance/</guid><description>
&lt;h2 id="서론">서론&lt;/h2>
&lt;p>최근 아니 이미 몇 년간 이어져온 트렌드는 &lt;code>Cloud&lt;/code>이다. 어디서나 접속 가능한 컴퓨팅 자원 및 서비스를 제공하는 것인데, 이것이 가져오는 편의성은 어마어마하다. 우리는 더 이상 내가 가진 자원에 종속되지 않아도 됨을 의미하고, 어디에 있든 언제든지 간에 클라우드 자원에 접속하여 이전 작업을 이어갈 수 있다.&lt;/p>
&lt;p>실제로 클라우드의 수혜를 보는 것은 서비스를 사용하는 사용자보다도 개발자이다. 사용자 입장에서는 클라우드 서비스니 뭐니 해도 레거시한 서버와 차이를 느끼기 힘든 반면, 개발자 입장에서는 클라우드를 도입해서 서버 관리에 이점이 확실하기 때문이다.&lt;/p>
&lt;p>개발자에게 클라우드가 이로운 점이 이뿐만이 아니다. 개발서버를 구축하는 것은 개발환경에 있어서의 종속성을 벗어날 수 있게 해준다. 로컬에서 작업한 작업물은 다른 PC에서 이어서 작업하기 위해서 준비해야 할 것들이 사라진다. 물론 git으로 프로젝트를 관리한다고 하는 방법으로 해결할 수 있지 않느냐라는 질문이 있을 수 도 있겠다. 하지만 종속적인 환경들을 다른 PC에서 매번 준비한다는 것은 불편하다.&lt;/p>
&lt;blockquote>
&lt;p>특히나 나와 같이 군대에서 코딩하려는 사람에게는 클라우드 환경 만큼이나 유용한 것은 없을 것이다.&lt;/p>
&lt;/blockquote>
&lt;p>대표적인 클라우드 제공업체로는 &lt;code>AWS(Amazon Web Service)&lt;/code>, &lt;code>MS Azure&lt;/code>, &lt;code>GCP(Google Cloud Platform)&lt;/code>이 있다. AWS는 1년간 매달 750시간 사용 가능한 리눅스 인스턴스를 제공하며, 애저 또한 무료 크레딧을 제공한다. 하지만 오늘 소개할 것은 평생 무료 인스턴스를 제공하는 GCP이다.&lt;/p>
&lt;p>GCP가 신규 회원에게 제공하는 혜택은 아래와 같다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-plaintext" data-lang="plaintext">- 평생 무료 이용 가능한 인스턴스
- 3달 동안 이용 가능한 $300 크레딧
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="인스턴스-생성">인스턴스 생성&lt;/h2>
&lt;p>인스턴스 생성에 앞서 &lt;a href="https://cloud.google.com/">구글 클라우드 플랫폼(GCP)&lt;/a>에 가입하자. 가입하는 과정은 그리 어렵지 않으니 따로 설명하진 않겠다. 회원가입이 되었다면 우선 아무런 이름이든 상관없으니 프로젝트를 생성한다. 이를 위해서 &lt;a href="https://console.cloud.google.com/">콘솔&lt;/a>로 접속해서 진행한다.&lt;/p>
&lt;p>&lt;img src="create-gcp-instance1.png" alt="create-gcp-instance1">&lt;/p>
&lt;p>앞에서의 과정이 모두 끝났다면 인스턴스를 생성해준다. 생성한 프로젝트에서 햄버거 메뉴를 눌러 &lt;code>Compute Engine-VM 인스턴스&lt;/code>를 클릭해서 들어가주고, 위 사진에 보이는 플러스 버튼을 눌러 인스턴스 생성을 시작하자.&lt;/p>
&lt;p>&lt;img src="create-gcp-instance2.png" alt="create-gcp-instance2">&lt;/p>
&lt;p>여기서 이름은 원하는 대로 지어주면 되고, 중요한 부분은 리전과 머신 구성 부분이다. &lt;code>평생 무료 인스턴스&lt;/code>를 만들기 위해서는 조건이 있는데, 우선 region을 &lt;code>us-east1-b&lt;/code>를 사용해야 하고 머신 유형은 &lt;code>f1-micro&lt;/code>를 사용해야 한다.&lt;/p>
&lt;blockquote>
&lt;p>만약 제공되는 $300 크레딧 사용이 목적이라면 다른 리전과 머신 유형으로 구성하는 것을 추천한다. 평생 무료 인스턴스의 성능이 매우 낮기 때문이다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="create-gcp-instance3.png" alt="create-gcp-instance3">&lt;/p>
&lt;p>이제 설정할 것은 부팅 디스크와 방화벽 설정뿐이다. 웹 서버로 이용할 서버를 구성하고 싶다면 HTTP, HTTPS를 허용을 해주어야만 한다.&lt;/p>
&lt;p>&lt;img src="create-gcp-instance4.png" alt="create-gcp-instance4">&lt;/p>
&lt;p>부팅 디스크 설정의 변경 버튼을 눌러서 다른 OS를 선택할 수 있는데 나는 우분투를 선호해서 &lt;code>Ububtu 20.04 LTS&lt;/code>를 선택했다. 참고로 디스크는 30GB까지가 무료로 제공되는 용량이다.&lt;/p>
&lt;p>이렇게까지 설정해서 만들기를 누르면 인스턴스가 생성되며, GCP에서 지원하는 web SSH 연결을 이용해서 쉽게 접속해서 이용할 수가 있다.&lt;/p></description></item><item><title>Post: 군대에서 코딩하기</title><link>http://Jeonghun-Ban.github.io/post/coding-in-the-military/</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/post/coding-in-the-military/</guid><description>
&lt;p>대한민국 국적의 신체 건강한 남성이라면 누구나 군대라는 곳을 원치 않더라도 와야만 한다. 사회에서 떨어진 곳에서 자신이 하던 일을 지속하지 못한다는 점은 개개인들에게 경력단절이라는 큰 손해로 이어진다. 특히 개발자라는 직업은 특성상 빠르게 변화하는 트랜드에 민감하게 반응하고 공부해야 하는 만큼, 이로 인한 좌절은 더더욱 클 수밖에 없다.&lt;/p>
&lt;p>군대에 오고 얼마 지나지 않았을 무렵에는 사지방 PC에 직접 개발환경을 설치하고 개발해보려고 했으나 아래와 같은 제약조건에 인해 이 방법은 몇 번 사용하다가 포기했다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-plaintext" data-lang="plaintext">- 육군 지침에서 `자료 통신 프로토콜(ftp, telnet)`을 금하고 있다.
- 이는 오픈소스 개발에 필수적인 `git`도 엄연히 사용해선 안된다는 것을 의미한다.
- 사지방 PC는 자동 로그오프 기능과 초기화로 인해 개발환경 유지가 안된다.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 제약사항을 다시보자. http나 https 프로토콜으로 &lt;code>웹 사이트 접속&lt;/code>하는 것에는 전혀 문제가 없다는 것을 알 수 있다. 그렇기 때문에 웹 브라우저를 통해 통신하는 것은 지침에 위반되지 않는다. 나는 여기에 해답이 있다고 생각했고, 군대에서 코딩을 하는 방법을 찾아냈다.&lt;/p>
&lt;p>&lt;em>웹 기반 개발환경을 구축하면 초기화되지 않는 개인 특화된 개발환경을 사용 가능하다!&lt;/em>&lt;/p>
&lt;p>구글링을 통해 알아본 바로 군복무를 하는 동안 &lt;code>cloud9&lt;/code>이나 &lt;code>구름ide&lt;/code> 등을 이용한 개발자 분들이 몇몇 계셨다. 하지만 나는 &lt;code>Google Cloud Platform&lt;/code>을 활용하여 개발 환경을 구축하였다. GCP는 기본 인스턴스에 한해서는 평생 무료로 제공하며, 3달 동안 사용 가능한 $300 크레딧을 제공한다. 최소 3개월 동안은 intel의 쿼드코어 CPU, 15GB의 램 메모리로 구성된 인스턴스를 계속 운용할 수 있는 크레딧이다. 웹/앱 개발에 있어서는 충분한 성능을 제공하는 서버를 구축할 수 있다.&lt;/p>
&lt;blockquote>
&lt;p>이전에는 1년 간 사용가능한 $300 크레딧을 제공했으나 사용기간이 단축되었다.&lt;/p>
&lt;/blockquote>
&lt;p>앞으로 포스팅을 통해서 서버를 생성해 개발환경을 구축하는 방법을 소개하고자 한다. 준비해야 할 단계는 딱 두 개뿐이다. 서버를 생성하고 개발환경을 구성한다.&lt;/p>
&lt;ul>
&lt;li>1편 &lt;a href="../create-gcp-instance">GCP 인스턴스 만들기&lt;/a>&lt;/li>
&lt;li>2편 &lt;a href="../code-server">&lt;code>Code-Server&lt;/code>로 웹 IDE 구축하기&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>서버가 꼭 GCP로 구성되어야 하는 것은 아니다. 개인 서버를 이용해도 좋고 다른 서비스를 이용해도 좋으나, 나는 이번에 GCP를 활용해보았고 그 방법을 정리해보게 되었다.&lt;/p></description></item></channel></rss>