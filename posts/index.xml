<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>📝 Posts on Jeonghun's blog</title><link>https://jeonghun-ban.github.io/posts/</link><description>Recent content in 📝 Posts on Jeonghun's blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>junghoon.ban@gmail.com (Jeonghun)</managingEditor><webMaster>junghoon.ban@gmail.com (Jeonghun)</webMaster><copyright>©{year}, All Rights Reserved</copyright><lastBuildDate>Fri, 16 Jul 2021 14:06:26 +0000</lastBuildDate><atom:link href="https://jeonghun-ban.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>[Java] 기본 자료형과 참조 자료형</title><link>https://jeonghun-ban.github.io/posts/java/primitive-type-and-reference-type/</link><pubDate>Fri, 16 Jul 2021 14:06:26 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Fri, 16 Jul 2021 14:06:26 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/java/primitive-type-and-reference-type/</guid><description>자료형 종류 자료형은 크게 기본 자료형과 참조 자료형으로 나누어진다. 이번 포스팅에서는 자바 프로그래밍에 있어서 기초가 되는 자료형에 한해서만 알아보기로 한다.</description><dc:creator>Jeonghun</dc:creator><category>Java</category><category>자료형</category><category>기본 자료형</category><category>참조 자료형</category><category>Java</category><category>자바 스터디</category></item><item><title>이젠 코테를 준비할 때</title><link>https://jeonghun-ban.github.io/posts/general/its-time-to-prepare-codingtest/</link><pubDate>Wed, 14 Jul 2021 13:53:39 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Wed, 14 Jul 2021 13:53:39 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/general/its-time-to-prepare-codingtest/</guid><description>코테를 준비하자 최근 코딩테스트를 준비해야겠다고 결심했다. 전역을 한 이후 앞으로 취업 준비를 하게 되거나 대외활동을 지원하는데 있어서 필수적인 요소라고 생각하</description><dc:creator>Jeonghun</dc:creator><category>코딩테스트</category><category>코딩테스트</category></item><item><title>[Refactoring] 코드에서 나는 악취</title><link>https://jeonghun-ban.github.io/posts/refactoring/smell-in-code/</link><pubDate>Tue, 13 Apr 2021 13:51:13 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Tue, 13 Apr 2021 13:51:13 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/refactoring/smell-in-code/</guid><description>리팩터링을 언제해야 하는가에 대해 명확하게 정립된 규칙은 없다. 하지만 리팩터링이 절실한 코드들의 특징은 존재한다. 켄트 백은 이를 냄새(악취)라고 정의한다.</description><dc:creator>Jeonghun</dc:creator><category>refactoring</category><category>agile</category><category>refactoring</category><category>리팩터링</category></item><item><title>코드 서버에 커스텀 폰트 적용하기</title><link>https://jeonghun-ban.github.io/posts/development-environment/how-to-add-custom-fonts-on-code-server/</link><pubDate>Thu, 11 Mar 2021 14:24:16 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Thu, 11 Mar 2021 14:24:16 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/development-environment/how-to-add-custom-fonts-on-code-server/</guid><description>코드 서버를 개인 서버에서 운용하게 되면서 언제 어디서든 인터넷만 가능하면 코딩할 수 있고 블로그 포스팅도 가능한 환경을 구성할 수 있었다. 다만 하나 아쉬웠던 거라고</description><dc:creator>Jeonghun</dc:creator><category>개발 환경</category><category>코드 서버</category><category>개발 환경</category></item><item><title>[Refactoring] 리팩터링이란?</title><link>https://jeonghun-ban.github.io/posts/refactoring/what-is-refactoring/</link><pubDate>Sat, 06 Feb 2021 02:34:16 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sat, 06 Feb 2021 02:34:16 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/refactoring/what-is-refactoring/</guid><description>이 글은 마틴 파울러의 리팩터링 2판을 참고하여 쓰여졌습니다. 마틴 파울러의 정의 리팩터링(refactoring)이라는 용어는 엔지니어 사이에서 두루뭉실</description><dc:creator>Jeonghun</dc:creator><category>refactoring</category><category>agile</category><category>refactoring</category><category>리팩터링</category></item><item><title>[UML 2.0] 순차 다이어그램(Sequence Diagram)</title><link>https://jeonghun-ban.github.io/posts/uml/sequence-diagram/</link><pubDate>Sat, 23 Jan 2021 16:10:03 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sat, 23 Jan 2021 16:10:03 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/uml/sequence-diagram/</guid><description>객체들의 상호작용을 나타내는 다이어그램 중 하나로 객체들 사이의 메시지 송신과 그들의 순서를 나타낸다. 구성요소 객체 가장 윗부분에 표현 왼쪽에서 오른쪽으로 객체</description><dc:creator>Jeonghun</dc:creator><category>UML</category><category>OOP</category><category>Java</category><category>UML</category><category>객체 지향 설계</category></item><item><title>[UML 2.0] 컬레보레이션 다이어그램(Collaboration Diagram)</title><link>https://jeonghun-ban.github.io/posts/uml/collaboration-diagram/</link><pubDate>Sat, 16 Jan 2021 18:48:45 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sat, 16 Jan 2021 18:48:45 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/uml/collaboration-diagram/</guid><description>UML 2.0에서 디자인 패턴을 표현하는 도구 객체들이 특정 상황에서 수행하는 역할의 상호작용을 작성 UML 1.X에서 사용되던 컬레보레이션 다이어그램은 2.0에서 통</description><dc:creator>Jeonghun</dc:creator><category>UML</category><category>OOP</category><category>Java</category><category>UML</category><category>객체 지향 설계</category></item><item><title>[OOP] 객체지향 설계 원칙: SOLID 원칙</title><link>https://jeonghun-ban.github.io/posts/oop/solid-principle/</link><pubDate>Sun, 10 Jan 2021 19:53:10 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sun, 10 Jan 2021 19:53:10 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/oop/solid-principle/</guid><description>단일 책임 원칙(SRP) 단일 책임 원칙(Single Responsiblity Principle, SRP): 단 하나의 책임만 가져야 한다는 원칙 책임의 의미 SRP에서 말하는 책임의 기본 단위는 객체를 지칭한다</description><dc:creator>Jeonghun</dc:creator><category>OOP</category><category>JAVA</category><category>OOP</category><category>객체지향 개념</category></item><item><title>[OOP] 객체지향 프로그래밍(OOP) 특징</title><link>https://jeonghun-ban.github.io/posts/oop/oop-features/</link><pubDate>Sat, 09 Jan 2021 17:18:32 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sat, 09 Jan 2021 17:18:32 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/oop/oop-features/</guid><description>추상화(Abstraction) 구체적인 사물들의 공통적인 특징을 파악해서 하나의 개념으로 다루는 수단이다. 즉 복잡한 자료, 모듈, 시스템 등으로부터 핵심</description><dc:creator>Jeonghun</dc:creator><category>OOP</category><category>Java</category><category>OOP</category><category>객체지향 개념</category></item><item><title>[UML 2.0] 클래스 다이어그램(Class Diagram)</title><link>https://jeonghun-ban.github.io/posts/uml/class-diagram/</link><pubDate>Fri, 08 Jan 2021 19:20:43 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Fri, 08 Jan 2021 19:20:43 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/uml/class-diagram/</guid><description>클래스란? 클래스는 동일한 속성과 행위를 수행하는 객체들의 집합이다. 예를 들어 소프트웨어를 전공중인 학생들의 공통점은 소프트웨어를 전공한다는 사실과 동일한</description><dc:creator>Jeonghun</dc:creator><category>UML</category><category>OOP</category><category>Java</category><category>Class</category><category>Modeling</category><category>UML</category><category>객체 지향 설계</category></item><item><title>[UML 2.0] UML이란?</title><link>https://jeonghun-ban.github.io/posts/uml/what-is-uml/</link><pubDate>Sun, 03 Jan 2021 11:22:49 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sun, 03 Jan 2021 11:22:49 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/uml/what-is-uml/</guid><description>개념 요구 분석, 시스템 설계, 시스템 구현 등의 시스템 개발 과정에서 개발자 사이의 의사 소통이 원활하게 이루어지도록 표준화한 통합 모델링 언어(United Modeling Language)</description><dc:creator>Jeonghun</dc:creator><category>UML</category><category>OOP</category><category>Modeling</category><category>UML</category><category>객체 지향 설계</category></item><item><title>2020년 백엔드 개발자 회고</title><link>https://jeonghun-ban.github.io/posts/retrospective/2020-backend-developer-retrospective/</link><pubDate>Fri, 01 Jan 2021 19:59:18 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Fri, 01 Jan 2021 19:59:18 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/retrospective/2020-backend-developer-retrospective/</guid><description>이번년도는 돌이켜보면 참으로 다사다난한 해였다. 1년동안 활동한 멋쟁이 사자처럼 7기를 무사히 마치고, 8기 운영진을 선발했다. 그리고 운영진 교육을 진행하면</description><dc:creator>Jeonghun</dc:creator><category>회고</category><category>멋쟁이 사자처럼</category><category>취업</category><category>군대</category><category>목표</category><category>회고</category><category>개발 환경</category></item><item><title>웹 애플리케이션 구조(SSR, CSR, SPA, MPA)</title><link>https://jeonghun-ban.github.io/posts/web/web-application-structure/</link><pubDate>Sat, 26 Dec 2020 14:06:55 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sat, 26 Dec 2020 14:06:55 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/web/web-application-structure/</guid><description>서론 나는 백엔드 개발자라는 꿈을 가지고 열심히 달려왔다고 생각한다. 그 결과 엘리스라는 산업체에서 짧게나마 복무를 해보기도 했었다. 하지만 지금 생각해보면 백엔</description><dc:creator>Jeonghun</dc:creator><category>Architecture</category><category>SSR</category><category>CSR</category><category>SPA</category><category>MPA</category><category>Web</category></item><item><title>N Tier Architecture</title><link>https://jeonghun-ban.github.io/posts/architecture/n-tier-architecture/</link><pubDate>Sat, 26 Dec 2020 10:12:54 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sat, 26 Dec 2020 10:12:54 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/architecture/n-tier-architecture/</guid><description>다층구조 아키텍쳐는 일반적으로 클라이언트-서버 애플리케이션에서 사용된다. 웹 애플리케이션을 비롯한 대다수 애플리케이션에서 활용되는 기본적인 구조인 만큼</description><dc:creator>Jeonghun</dc:creator><category>Architecture</category><category>n-tier-architecture</category><category>Architecture</category></item><item><title>code-server를 이용해서 웹 IDE 구축하기</title><link>https://jeonghun-ban.github.io/posts/development-environment/build-web-ide-using-code-server/</link><pubDate>Thu, 03 Dec 2020 04:34:19 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Thu, 03 Dec 2020 04:34:19 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/development-environment/build-web-ide-using-code-server/</guid><description>서론 최근 웹으로 접속하는 개발환경인 Web IDE가 활발하게 활용되고 있다. 대표적으로 Cloud9, Codeanywhere, 구름IDE 등이 있는데, 깃헙에서도 Codespace라는 이름으로</description><dc:creator>Jeonghun</dc:creator><category>개발 환경</category><category>code-server</category><category>개발 환경</category><category>군대에서 코딩하기</category></item><item><title>GCP 인스턴스 만들기</title><link>https://jeonghun-ban.github.io/posts/development-environment/create-gcp-instance/</link><pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Wed, 02 Dec 2020 00:00:00 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/development-environment/create-gcp-instance/</guid><description>서론 최근 아니 이미 몇 년간 이어져온 트렌드는 Cloud이다. 어디서나 접속 가능한 컴퓨팅 자원 및 서비스를 제공하는 것인데, 이것이 가져오는 편의성은 어마어마하</description><dc:creator>Jeonghun</dc:creator><category>개발 환경</category><category>GCP</category><category>Cloud</category><category>개발 환경</category><category>군대에서 코딩하기</category></item><item><title>군대에서 코딩하기</title><link>https://jeonghun-ban.github.io/posts/development-environment/coding-in-the-military/</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Tue, 01 Dec 2020 00:00:00 +0000</atom:modified><guid>https://jeonghun-ban.github.io/posts/development-environment/coding-in-the-military/</guid><description>대한민국 국적의 신체 건강한 남성이라면 누구나 군대라는 곳을 원치 않더라도 와야만 한다. 사회에서 떨어진 곳에서 자신이 하던 일을 지속하지 못한다는 점은 개개인들에</description><dc:creator>Jeonghun</dc:creator><category>개발 환경</category><category>개발 환경</category><category>군대에서 코딩하기</category></item></channel></rss>