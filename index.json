[{"description":"자바의 기본 자료형과 참조 자료형에 대해서 알아보자!\n","id":0,"section":"posts","tags":["Java","자료형","기본 자료형","참조 자료형"],"title":"[Java] 기본 자료형과 참조 자료형","uri":"https://jeonghun-ban.github.io/posts/java/primitive-type-and-reference-type/"},{"description":"코딩테스트를 준비하기로 결심한 이유와 언어 선택에 대한 고민\n","id":1,"section":"posts","tags":["코딩테스트"],"title":"이젠 코테를 준비할 때","uri":"https://jeonghun-ban.github.io/posts/general/its-time-to-prepare-codingtest/"},{"description":"코드에서 나는 악취, 코드 스멜\n","id":2,"section":"posts","tags":["refactoring","agile"],"title":"[Refactoring] 코드에서 나는 악취","uri":"https://jeonghun-ban.github.io/posts/refactoring/smell-in-code/"},{"description":"코드 서버에 커스텀 폰트 적용하기\n","id":3,"section":"posts","tags":["개발 환경","코드 서버"],"title":"코드 서버에 커스텀 폰트 적용하기","uri":"https://jeonghun-ban.github.io/posts/development-environment/how-to-add-custom-fonts-on-code-server/"},{"description":"코드의 재구성, 리팩터링\n","id":4,"section":"posts","tags":["refactoring","agile"],"title":"[Refactoring] 리팩터링이란?","uri":"https://jeonghun-ban.github.io/posts/refactoring/what-is-refactoring/"},{"description":"객체들의 상호작용을 나타내는 다이어그램\n","id":5,"section":"posts","tags":["UML","OOP","Java"],"title":"[UML 2.0] 순차 다이어그램(Sequence Diagram)","uri":"https://jeonghun-ban.github.io/posts/uml/sequence-diagram/"},{"description":"UML2.0에서 디자인 패턴을 표현하는 도구\n","id":6,"section":"posts","tags":["UML","OOP","Java"],"title":"[UML 2.0] 컬레보레이션 다이어그램(Collaboration Diagram)","uri":"https://jeonghun-ban.github.io/posts/uml/collaboration-diagram/"},{"description":"객제지향 설계 원칙\n","id":7,"section":"posts","tags":["OOP","JAVA"],"title":"[OOP] 객체지향 설계 원칙: SOLID 원칙","uri":"https://jeonghun-ban.github.io/posts/oop/solid-principle/"},{"description":"객체지향 프로그래밍(OOP)의 네가지 특징\n","id":8,"section":"posts","tags":["OOP","Java"],"title":"[OOP] 객체지향 프로그래밍(OOP) 특징","uri":"https://jeonghun-ban.github.io/posts/oop/oop-features/"},{"description":"","id":9,"section":"posts","tags":["UML","OOP","Java","Class","Modeling"],"title":"[UML 2.0] 클래스 다이어그램(Class Diagram)","uri":"https://jeonghun-ban.github.io/posts/uml/class-diagram/"},{"description":"객체 지향 애플리케이션을 모델링하기 위한 언어, UML\n","id":10,"section":"posts","tags":["UML","OOP","Modeling"],"title":"[UML 2.0] UML이란?","uri":"https://jeonghun-ban.github.io/posts/uml/what-is-uml/"},{"description":"2020년을 되돌아보며, 그리고 그 이후\n","id":11,"section":"posts","tags":["회고","멋쟁이 사자처럼","취업","군대","목표"],"title":"2020년 백엔드 개발자 회고","uri":"https://jeonghun-ban.github.io/posts/retrospective/2020-backend-developer-retrospective/"},{"description":"","id":12,"section":"","tags":null,"title":"About","uri":"https://jeonghun-ban.github.io/about/"},{"description":"최근 웹 프론트엔드에서 트랜드인 용어를 정리해보았다.\n","id":14,"section":"posts","tags":["Architecture","SSR","CSR","SPA","MPA"],"title":"웹 애플리케이션 구조(SSR, CSR, SPA, MPA)","uri":"https://jeonghun-ban.github.io/posts/web/web-application-structure/"},{"description":"전공 수업 프로젝트에서 찾은 다층구조 아키텍처\n","id":15,"section":"posts","tags":["Architecture","n-tier-architecture"],"title":"N Tier Architecture","uri":"https://jeonghun-ban.github.io/posts/architecture/n-tier-architecture/"},{"description":"나만의 웹 IDE 만들기\n","id":16,"section":"posts","tags":["개발 환경","code-server"],"title":"code-server를 이용해서 웹 IDE 구축하기","uri":"https://jeonghun-ban.github.io/posts/development-environment/build-web-ide-using-code-server/"},{"description":"나만의 평생 무료 인스턴스 만들기\n","id":17,"section":"posts","tags":["개발 환경","GCP","Cloud"],"title":"GCP 인스턴스 만들기","uri":"https://jeonghun-ban.github.io/posts/development-environment/create-gcp-instance/"},{"description":"군대에서 코딩을 어떻게 할 수 있을까? 그 답을 찾기 위한 여정\n","id":18,"section":"posts","tags":["개발 환경"],"title":"군대에서 코딩하기","uri":"https://jeonghun-ban.github.io/posts/development-environment/coding-in-the-military/"}]