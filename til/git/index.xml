<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jeonghun-Ban – Git</title><link>http://Jeonghun-Ban.github.io/til/git/</link><description>Recent content in Git on Jeonghun-Ban</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 16 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://Jeonghun-Ban.github.io/til/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Til: core.autocrlf</title><link>http://Jeonghun-Ban.github.io/til/git/core.autocrlf/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/git/core.autocrlf/</guid><description>
&lt;p>&lt;code>git&lt;/code>을 통해서 윈도우와 맥이나 리눅스 개발자가 협업을 할 때 개행문자의 차이로 인해 &lt;code>whitespace&lt;/code> 에러가 발생한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git add README.md
warning: LF will be replaced by CRLF in README.md.
The file will have its original line endings in your working directory
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>운영체제에 맞춰서 개행 문자를 바꾸게 된다는 것을 매번 에러 메시지로 알려준다.&lt;/p>
&lt;/blockquote>
&lt;p>이러한 문제를 해결하는 가장 간단한 방법은 개행 문자를 LF로 통일하는 것이다. 이를 가능하게 해주는 기능이 &lt;code>git&lt;/code>에 이미 존재하는데 그것이 바로 &lt;code>core.autocrlf&lt;/code>이다.&lt;/p>
&lt;h3 id="윈도우-사용자">윈도우 사용자&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git config --global core.autocrlf true
&lt;/code>&lt;/pre>&lt;/div>&lt;p>윈도우에서 사용되는 파일은 CRLF이기 때문에 커밋할 때 LF로 바꿔주고, checkout할 때는 LF를 CRLF로 바꿔주는 과정이 필요하다.&lt;/p>
&lt;h3 id="맥이나-리눅스">맥이나 리눅스&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git config --global core.autocrlf input
&lt;/code>&lt;/pre>&lt;/div>&lt;p>맥이나 리눅스는 개행문자가 LF이기 때문에 커밋할 때 바꾸지 않아도 되고, 가져올 때도 변경할 필요가 없다. 하지만 혹시라도 로컬에 있는 파일에 CRLF가 있다면 LF로 변경해주길 원한다면 다음과 같은 코드를 사용하자.&lt;/p>
&lt;h3 id="메시지-삭제">메시지 삭제&lt;/h3>
&lt;p>오류 메시지만 지우고 알아서 작업하고 싶은 경우에는 다음 코드를 사용하면 된다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git config --global core.autocrlf false
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Til: Git Credential</title><link>http://Jeonghun-Ban.github.io/til/git/git-credential/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/git/git-credential/</guid><description>
&lt;p>윈도우나 맥에서는 기본적으로 깃 사용자의 아이디 및 비밀번호를 저장하여 관리한다.
반면 우분투에서 깃을 사용하면 &lt;code>git pull/push&lt;/code>를 할 때마다 아이디 비밀번호를 입력해야만 한다. 이러한 번거로움을 줄이기 위해 &lt;code>Git Credential&lt;/code>이라는 계정정보 저장기능을 사용한다.&lt;/p>
&lt;h3 id="영구-저장">영구 저장&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git config --global credential.helper store
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>global 속성을 제외하면 해당 디렉토리에만 적용된다.&lt;/p>
&lt;/blockquote>
&lt;h3 id="캐시로-저장">캐시로 저장&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git config --global credential.helper cache
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>cache는 기본적으로 15분 동안 인증 절차를 요구하지 않는다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git config credential.helper &lt;span style="color:#e6db74">&amp;#39;cache --timeout=3600&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># 3600초 동안 인증 절차를 생략한다.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>시간을 설정할 때는 위와 같이 timeout 속성을 이용한다. (단위는 초)&lt;/p>
&lt;/blockquote></description></item><item><title>Til: gitignore</title><link>http://Jeonghun-Ban.github.io/til/git/gitignore/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/git/gitignore/</guid><description>
&lt;h2 id="적용-방법">적용 방법&lt;/h2>
&lt;ol>
&lt;li>프로젝트 폴더 내에 &lt;code>.gitignore&lt;/code> 파일 생성&lt;/li>
&lt;li>레파지토리에 업로드하지 않을 파일이나 폴더 지정&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;a href="http://www.gitignore.io">링크&lt;/a>에 프로그래밍 언어나 IDE를 입력하면, 불필요한 파일을 제거하기 위한 &lt;code>.gitignore&lt;/code>를 빠르게 작성 가능하다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="제대로-적용되지-않는-문제-해결">제대로 적용되지 않는 문제 해결&lt;/h2>
&lt;p>이미 깃 저장소에 올라간 파일에 대해서 &lt;code>gitignore&lt;/code>가 적용되지 않는 경우, 아래와 같은 코드로 해결 가능하다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git rm -r --cached .
$ git add .
$ git commit -m &lt;span style="color:#e6db74">&amp;#34;fixed untracked files&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Til: Rebase Command</title><link>http://Jeonghun-Ban.github.io/til/git/rebase-command/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/git/rebase-command/</guid><description>
&lt;h2 id="커밋-수정">커밋 수정&lt;/h2>
&lt;h3 id="가장-최근-커밋-수정">가장 최근 커밋 수정&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git commit --amend &lt;span style="color:#75715e"># vi 등 편집기로 수정&lt;/span>
$ git commit --amend -m &lt;span style="color:#e6db74">&amp;#34;rewrite message&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 옵션으로 변경도 가능&lt;/span>
$ git commit --amend --author&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;auther_name &amp;lt;auther_email&amp;gt;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>git add&lt;/code> 명령어로 변경사항을 Staging Area에 넣고, &lt;code>git commit --amend&lt;/code> 명령어를 실행하면 최신 커밋에 변경사항이 반영된다.&lt;/p>
&lt;h3 id="특정-커밋-수정">특정 커밋 수정&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git rebase -i &amp;lt;commit hash&amp;gt;
&lt;span style="color:#75715e"># pick -&amp;gt; edit&lt;/span>
$ git commit --amend
$ git rebase --continue
$ git push -f
&lt;/code>&lt;/pre>&lt;/div>&lt;p>여러 개의 커밋을 수정하는 것도 가능한데 &lt;code>git rebase -i&lt;/code> 명령어를 실행하고 수정할 커밋을 모두 edit으로 지정해주면 된다. 이후에는 &lt;code>git commit --amend&lt;/code>와 &lt;code>git rebase --continue&lt;/code> 명령어를 반복해서 진행하며 메시지를 하나씩 수정해주면 된다.&lt;/p>
&lt;blockquote>
&lt;p>해시는 &lt;code>git log&lt;/code> 명령어로 확인 가능하다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="커밋-합치기">커밋 합치기&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git rebase -i HEAD~2 &lt;span style="color:#75715e"># 가장 최근 커밋 두개&lt;/span>
&lt;span style="color:#75715e"># 합치고 없앨 커밋 pick -&amp;gt; f, fixup&lt;/span>
$ git commit --amend
$ git push -f
&lt;/code>&lt;/pre>&lt;/div>&lt;p>git을 관리하다 보면 커밋을 합쳐야 하는 경우가 있다. 예를 들면 하나의 기능 구현에 대한 커밋이 여러 개로 나누어져 있는 경우, 모두 하나로 합쳐서 올리는 것이 바람직하다. 이럴 때 위 명령어를 이용하면 손쉽게 합칠 수 있다.&lt;/p>
&lt;h2 id="작성시간-변경">작성시간 변경&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git rebase -i &amp;lt;commit hash&amp;gt;
pick -&amp;gt; edit
$ GIT_COMMITTER_DATE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Mon 21 Oct 00:00:00 2019 KST&amp;#34;&lt;/span> git commit --amend --no-edit --date &lt;span style="color:#e6db74">&amp;#34;Mon 21 Oct 00:00:00 2019 KST&amp;#34;&lt;/span>
$ git rebase --continue
$ git push -f
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Til: Troubleshooting</title><link>http://Jeonghun-Ban.github.io/til/git/troubleshooting/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/git/troubleshooting/</guid><description/></item></channel></rss>