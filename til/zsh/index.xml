<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jeonghun-Ban – Z Shell</title><link>http://Jeonghun-Ban.github.io/til/zsh/</link><description>Recent content in Z Shell on Jeonghun-Ban</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 16 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://Jeonghun-Ban.github.io/til/zsh/index.xml" rel="self" type="application/rss+xml"/><item><title>Til: Installation</title><link>http://Jeonghun-Ban.github.io/til/zsh/installation/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/zsh/installation/</guid><description>
&lt;p>&lt;code>ZSH(Z Shell)&lt;/code>은 강력한 자동완성 기능을 제공하는 bash보다 개선된 쉘이다. 그렇기 때문에 개발하는 데 있어서 명령어를 모두 외우지 않아도 된다는 점에서 사용자에게 큰 편의성을 제공한다. 그래서 인지 &lt;code>macOS Catalina&lt;/code>에서는 기본 쉘로 zsh이 채택되기도 했다.&lt;/p>
&lt;h3 id="zsh-설치">zsh 설치&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash"> $ sudo apt-get install zsh
&lt;span style="color:#75715e"># 기본 쉘을 zsh로 변경&lt;/span>
$ chsh -s /usr/bin/zsh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>혹시라도 아래와 같은 메시지가 나오면 2번을 선택해주면 된다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash">This is the Z Shell configuration &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> new users,
zsh-newuser-install.
You are seeing this message because you have no zsh startup files
&lt;span style="color:#f92672">(&lt;/span>the files .zshenv, .zprofile, .zshrc, .zlogin in the directory
~&lt;span style="color:#f92672">)&lt;/span>. This &lt;span style="color:#66d9ef">function&lt;/span> can help you with a few settings that should
make your use of the shell easier.
You can:
&lt;span style="color:#f92672">(&lt;/span>q&lt;span style="color:#f92672">)&lt;/span> Quit and &lt;span style="color:#66d9ef">do&lt;/span> nothing. The &lt;span style="color:#66d9ef">function&lt;/span> will be run again next time.
&lt;span style="color:#f92672">(&lt;/span>0&lt;span style="color:#f92672">)&lt;/span> Exit, creating the file ~/.zshrc containing just a comment.
That will prevent this &lt;span style="color:#66d9ef">function&lt;/span> being run again.
&lt;span style="color:#f92672">(&lt;/span>1&lt;span style="color:#f92672">)&lt;/span> Continue to the main menu.
&lt;span style="color:#f92672">(&lt;/span>2&lt;span style="color:#f92672">)&lt;/span> Populate your ~/.zshrc with the configuration recommended
by the system administrator and exit &lt;span style="color:#f92672">(&lt;/span>you will need to edit
the file by hand, &lt;span style="color:#66d9ef">if&lt;/span> so desired&lt;span style="color:#f92672">)&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="oh-my-zsh-설치">oh-my-zsh 설치&lt;/h3>
&lt;p>oh-my-zsh는 zsh에 여러가지 플러그인을 추가하여 커스터마이징할 수 있도록 하는 플러그인이다. 설치하는 방법은 아래와 같다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash"> $ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="테마-적용">테마 적용&lt;/h3>
&lt;p>&lt;code>oh-my-zsh&lt;/code>의 기본 테마는 &lt;code>robbyrussell&lt;/code>로 되어 있으나 &lt;code>agnoster&lt;/code>라는 더 이쁜 테마를 사용할 수도 있다. 적용 방법은 이와 같다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash"> $ sudo vi ~/.zshrc
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-vim" data-lang="vim"> &lt;span style="color:#a6e22e">ZSH_THEME&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;agnoster&amp;#34;&lt;/span> # &lt;span style="color:#a6e22e">해당&lt;/span> &lt;span style="color:#a6e22e">부분만&lt;/span> &lt;span style="color:#a6e22e">변경&lt;/span> &lt;span style="color:#a6e22e">후&lt;/span> &lt;span style="color:#a6e22e">저장&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Til: zsh-syntax-highlighting</title><link>http://Jeonghun-Ban.github.io/til/zsh/zsh-syntax-highlighting/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/zsh/zsh-syntax-highlighting/</guid><description>
&lt;h2 id="설치">설치&lt;/h2>
&lt;p>설치하는 방법에는 두 가지가 존재하는 데 필자는 플러그인으로 추가하는 방법을 추천한다.&lt;/p>
&lt;h3 id="일반-설치">일반 설치&lt;/h3>
&lt;h4 id="설치-1">설치&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
echo &lt;span style="color:#e6db74">&amp;#34;source &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>(q-)PWD&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&amp;#34;&lt;/span> &amp;gt;&amp;gt; &lt;span style="color:#e6db74">${&lt;/span>ZDOTDIR&lt;span style="color:#66d9ef">:-&lt;/span>$HOME&lt;span style="color:#e6db74">}&lt;/span>/.zshrc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 코드를 그대로 복사 후 Shell에서 실행&lt;/p>
&lt;blockquote>
&lt;p>설치된 경로가 zshrc의 마지막 줄에 추가된다.&lt;/p>
&lt;/blockquote>
&lt;h4 id="적용">적용&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash">source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>syntax highlighting 재실행 없이 적용&lt;/p>
&lt;/blockquote>
&lt;h3 id="plugin-manager-이용">plugin manager 이용&lt;/h3>
&lt;p>oh-my-zsh의 plugin으로써 설치하고 사용하는 방법은 다음과 같다.&lt;/p>
&lt;h4 id="설치-2">설치&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git &lt;span style="color:#e6db74">${&lt;/span>ZSH_CUSTOM&lt;span style="color:#66d9ef">:-&lt;/span>~/.oh-my-zsh/custom&lt;span style="color:#e6db74">}&lt;/span>/plugins/zsh-syntax-highlighting
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="플러그인을-zshrc에-추가">플러그인을 .zshrc에 추가&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash">plugins&lt;span style="color:#f92672">=(&lt;/span> &lt;span style="color:#f92672">[&lt;/span>plugins...&lt;span style="color:#f92672">]&lt;/span> zsh-syntax-highlighting&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#75715e"># zsh-syntax-highlighting 마지막에 추가&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="적용-1">적용&lt;/h4>
&lt;p>우분투 Shell을 재실행하면 적용된다.&lt;/p>
&lt;h2 id="오류-해결">오류 해결&lt;/h2>
&lt;p>&lt;code>plugin manager&lt;/code>로 적용시키다 보면 &lt;code>insecure directories&lt;/code>라는 오류가 발생할 수 있는데, 이럴때는 아래와 같은 코드를 실행하면 된다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">compaudit | xargs chmod g-w,o-w
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Til: disable zsh-syntax-highlighting underline</title><link>http://Jeonghun-Ban.github.io/til/zsh/disable-zsh-syntax-highlighting-underline/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/zsh/disable-zsh-syntax-highlighting-underline/</guid><description>
&lt;p>===&lt;/p>
&lt;p>&lt;code>zsh-syntax-highlighting&lt;/code>을 사용하는 경우, 파일이나 디렉터리의 경로가 밑줄이 그어진다.
다만 WSL 우분투에 위 기능을 사용하게 되면 창 리사이즈 시 밑줄이 화면 한 줄을 차지해버리는 문제가 발생한다.
따라서 이 기능을 지워서 사용하는 것이 오히려 편리하다.&lt;/p>
&lt;h3 id="underline-기능-없애기">underline 기능 없애기&lt;/h3>
&lt;p>&lt;code>~/.zshrc&lt;/code>를 편집기로 실행한다.&lt;/p>
&lt;pre>&lt;code class="language-vi" data-lang="vi">ZSH_HIGHLIGHT_STYLES[path]=none
ZSH_HIGHLIGHT_STYLES[path_prefix]=none
&lt;/code>&lt;/pre>&lt;p>위 코드를 &lt;code>.zshrc&lt;/code>의 맨 하단에 추가하고, 저장 및 종료한다.
그러면 파일 경로 밑줄 표시 기능이 없어진다.&lt;/p></description></item><item><title>Til: Changing Directory Color</title><link>http://Jeonghun-Ban.github.io/til/zsh/change-directory-color/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/zsh/change-directory-color/</guid><description>
&lt;ol>
&lt;li>
&lt;p>Pick a dircolors theme from Github &lt;a href="https://github.com/seebi/dircolors-solarized">repository&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download files in the user&amp;rsquo;s HOME&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-vi" data-lang="vi"># Download dircolors.ansi-dark
curl https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.ansi-dark --output ~/.dircolors
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>Edit ~/.zshrc&lt;/li>
&lt;/ol>
&lt;pre>&lt;code># set dircolors
eval `dircolors ~/.dircolors`
&lt;/code>&lt;/pre></description></item><item><title>Til: Register Alias</title><link>http://Jeonghun-Ban.github.io/til/zsh/register-alias/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/zsh/register-alias/</guid><description>
&lt;p>zsh에서는 &lt;code>~/.zshrc&lt;/code>에 필요한 alias를 등록하면 된다.&lt;/p>
&lt;pre>&lt;code class="language-vi" data-lang="vi"># alias zshconfig=&amp;quot;mate ~/.zshrc&amp;quot;
# alias ohmyzsh=&amp;quot;mate ~/.oh-my-zsh&amp;quot;
&lt;/code>&lt;/pre>&lt;p>텍스트에디터로 해당 파일을 열면 하단에 아래와 같이 적혀져 있는데 이후 alias를 작성하면 된다.&lt;/p>
&lt;pre>&lt;code>alias python=&amp;quot;python3.7&amp;quot;
alias pip=&amp;quot;pip3.7&amp;quot;
&lt;/code>&lt;/pre>&lt;p>예를 들어 우분투나 맥에서 python으로 명령어를 사용하고 싶을 때 위와 같이 적용한다.&lt;/p></description></item><item><title>Til: how to fix a corrupt zsh history</title><link>http://Jeonghun-Ban.github.io/til/zsh/how-to-fix-a-corrupt-zsh-history-file/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/zsh/how-to-fix-a-corrupt-zsh-history-file/</guid><description>
&lt;h2 id="에러-발생">에러 발생&lt;/h2>
&lt;p>WSL으로 깃 작업을 하던 중 예상치 못한 오류로 컴퓨터 셧다운 이후 해당 오류 발생&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">zsh: corrupt history file /home/jeonghun/.zsh_history
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="에러-해결">에러 해결&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cd ~
mv .zsh_history .zsh_history_bad
strings .zsh_history_bad &amp;gt; .zsh_history
fc -R .zsh_history
rm ~/.zsh_history_bad
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Til:</title><link>http://Jeonghun-Ban.github.io/til/zsh/oh-my-zsh-customization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/zsh/oh-my-zsh-customization/</guid><description>
&lt;h1 id="oh-my-zsh-customization">oh-my-zsh Customization&lt;/h1>
&lt;h2 id="사용자-이름-표시-생략">사용자 이름 표시 생략&lt;/h2>
&lt;p>방법은 크게 2가지 정도가 있는데, 모두 &lt;code>~/.zshrc&lt;/code>에 작성해주면 된다.&lt;/p>
&lt;h3 id="기본-유저-변경">기본 유저 변경&lt;/h3>
&lt;pre>&lt;code class="language-vi" data-lang="vi">DEFAULT_USER=&amp;quot;$(whoami)&amp;quot;
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>&lt;code>whoami&lt;/code>는 기본 유저를 지정하지 않을 때 사용&lt;/p>
&lt;/blockquote>
&lt;h3 id="prompt-context">prompt context&lt;/h3>
&lt;pre>&lt;code class="language-vi" data-lang="vi">prompt_context(){}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>중괄호 사이에는 유저를 프롬프트에 표기하는 형식을 지정할 수 있다. 비워두면 유저명이 생략된다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="멀티-라인-적용">멀티 라인 적용&lt;/h2>
&lt;p>&lt;code>zsh&lt;/code>와 &lt;code>agnoster&lt;/code>를 이용해서 리눅스 개발환경을 깔끔하게 할 수 있다.
만약 이때 경로가 너무 길어서 보기 불편하다거나, 경로가 표기되는 줄 이후에 명령줄이 나오면 좋겠다면 다음과 같은 방법으로 멀티 라인 적용이 가능하다.&lt;/p>
&lt;pre>&lt;code class="language-vi" data-lang="vi"># 멀티라인 적용 함수
prompt_newline() {
if [[ -n $CURRENT_BG ]]; then
echo -n &amp;quot;%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR
%(?.%F{$CURRENT_BG}.%F{red})❯%f&amp;quot;
else
echo -n &amp;quot;%{%k%}&amp;quot;
fi
echo -n &amp;quot;%{%f%}&amp;quot;
CURRENT_BG=''
}
&lt;/code>&lt;/pre>&lt;p>우선 위와 같은 코드를 &lt;code>~/.oh-my-zsh/themes/agnoster.zsh-theme&lt;/code> 파일에 작성해준다.&lt;/p>
&lt;pre>&lt;code class="language-vi" data-lang="vi">## Main prompt
build_prompt() {
RETVAL=$?
prompt_status
prompt_virtualenv
prompt_context
prompt_dir
prompt_git
prompt_hg
prompt_newline # 멀티라인 호출
prompt_end
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>~/.oh-my-zsh/themes/agnoster.zsh-theme&lt;/code> 하단에 위치한 build_prompt()에 &lt;code>prompt_newline&lt;/code>를 불러올 수 있도록 추가해준다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>참고자료&lt;/strong>
&lt;a href="https://wayhome25.github.io/etc/2017/03/12/zsh-alias/">https://wayhome25.github.io/etc/2017/03/12/zsh-alias/&lt;/a>&lt;/p></description></item><item><title>Til:</title><link>http://Jeonghun-Ban.github.io/til/zsh/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/zsh/readme/</guid><description>
&lt;h1 id="zsh">zsh&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="zsh-syntax-highlighting.md">zsh-syntax-highlighting&lt;/a>&lt;/li>
&lt;li>&lt;a href="disable-zsh-syntax-highlighting-underline.md">disable zsh-syntax-highlighting underline&lt;/a>&lt;/li>
&lt;li>&lt;a href="oh-my-zsh-customization.md">oh-my-zsh customization&lt;/a>&lt;/li>
&lt;li>&lt;a href="Change-Directory-Colors.md">Change Directory Colors&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="문제해결">문제해결&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="how-to-fix-a-corrupt-zsh-history-file.md">how to fix a corrupt zsh history file&lt;/a>&lt;/li>
&lt;li>&lt;a href="zsh/Register-alias-on-zsh.md">Register alias on zsh&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>