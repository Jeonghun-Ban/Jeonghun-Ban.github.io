<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jeonghun-Ban – Study</title><link>http://Jeonghun-Ban.github.io/til/django/study/</link><description>Recent content in Study on Jeonghun-Ban</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 16 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://Jeonghun-Ban.github.io/til/django/study/index.xml" rel="self" type="application/rss+xml"/><item><title>Til: What is Django?</title><link>http://Jeonghun-Ban.github.io/til/django/study/what-is-django/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/what-is-django/</guid><description>
&lt;h2 id="장고란">장고란?&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>파이썬을 기반으로 하는 오픈소스 웹 애플리케이션 프레임워크이다.&lt;/p>
&lt;blockquote>
&lt;p>프레임워크는 애플리케이션 개발에 필요한 기본 뼈대를 제공하는 것을 말한다.
장고는 웹 백엔드 구축에 필요한 다양한 기능들을 제공하고 있다.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>2020년 1월 기준 장고 최신 버전: &lt;code>v3.0.2&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>장고 소프트웨어 재단에 의해 개발이 진행되고 있다.&lt;/p>
&lt;ul>
&lt;li>공식 사이트: &lt;a href="https://www.djangoproject.com/">https://www.djangoproject.com/&lt;/a>&lt;/li>
&lt;li>공식 개발문서: &lt;a href="https://docs.djangoproject.com/ko/3.0/">https://docs.djangoproject.com/ko/3.0/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="장고의-구조">장고의 구조&lt;/h2>
&lt;ul>
&lt;li>고전적인 MVC 디자인 패턴을 변형한 MTV 패턴을 따른다.
&lt;ul>
&lt;li>M(Model)&lt;/li>
&lt;li>T(Template)&lt;/li>
&lt;li>V(View)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>MVC 디자인 패턴과 유사하지만, 몇가지 차이가 존재한다.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="장고의-특징">장고의 특징&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>웹 백엔드 개발에 필수적인 기능을 기본적으로 제공한다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스 관리&lt;/li>
&lt;li>사용자 인증 시스템&lt;/li>
&lt;li>관리자 인터페이스&lt;/li>
&lt;li>세션 관리 기능&lt;/li>
&lt;li>CSRF, SQL인젝션 방지와 같은 보안 대책&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>추가로 필요한 기능들은 외부 패키지를 이용하여 편리하게 구현 가능하다.&lt;/p>
&lt;ul>
&lt;li>장고를 위한 수많은 재사용 가능한 앱
&lt;a href="https://pypi.org/">https://pypi.org/&lt;/a>&lt;/li>
&lt;li>파이썬을 기반의 다양한 패키지
&lt;a href="https://djangopackages.org">https://djangopackages.org&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="대표적인-서비스">대표적인 서비스&lt;/h2>
&lt;ul>
&lt;li>인스타그램&lt;/li>
&lt;li>핀터레스트&lt;/li>
&lt;/ul></description></item><item><title>Til: MTV Pattern</title><link>http://Jeonghun-Ban.github.io/til/django/study/mtv-pattern/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/mtv-pattern/</guid><description>
&lt;p>장고는 &lt;code>MTV(Model, Template, View) 패턴&lt;/code>을 따른다. 해당 디자인 패턴을 통해서 웹 페이지가 어떻게 동작하는지 그 로직에 대해서 간단히 살펴보도록 하자.&lt;/p>
&lt;h2 id="mtv-구조">MTV 구조&lt;/h2>
&lt;p>&lt;code>MTV 패턴&lt;/code>을 사용하는 웹 페이지는 다음과 같이 동작한다.&lt;/p>
&lt;p>&lt;img src="../image/MTV_structure.png" alt="MTV_structure">&lt;/p>
&lt;p>웹 서버의 데이터를 단순히 조회하는 경우, 데이터베이스 상의 데이터는 &lt;code>Model&lt;/code>을 통해서 가져오게 된다. 그리고 가져온 데이터는 &lt;code>View&lt;/code>에서 적절히 가공되며 이것이 &lt;code>Template&lt;/code>으로 전달된다.&lt;/p>
&lt;p>결과적으로, 사용자는 크롬과 같은 웹브라우저를 통해서 &lt;code>Template&lt;/code>에 표현된 웹페이지를 볼 수 있다.&lt;/p>
&lt;h2 id="구성-요소">구성 요소&lt;/h2>
&lt;h3 id="model">Model&lt;/h3>
&lt;p>&lt;code>Model&lt;/code>은 데이터베이스 상에 저장되는 데이터를 처리하는 부분으로, 데이터베이스의 데이터 형식이 클래스로 정의된다. 장고에서는 &lt;code>ORM&lt;/code>이라는 데이터베이스를 관리하는 강력한 기능을 제공하는데, 이 기능은 &lt;code>Model&lt;/code>에서 정의한 데이터 형식으로 데이터베이스를 생성해주는 것이다. 이후 교안에서 이것의 사용방법에 대해서 자세히 다루도록 하겠다.&lt;/p>
&lt;h3 id="template">Template&lt;/h3>
&lt;p>&lt;code>Template&lt;/code>은 웹페이지에서 실질적으로 보여지는 부분으로, 주로 &lt;code>html&lt;/code> 파일로 정적인 페이지를 구성된다. 장고에서 제공하는 문법(템플릿 언어, Template Language)을 사용하면 페이지를 동적으로 작동하게 할 수 있다.&lt;/p>
&lt;h3 id="view">View&lt;/h3>
&lt;p>&lt;code>View&lt;/code>는 웹 애플리케이션 상에서 데이터를 처리하는 로직을 작성하는 부분이다. 데이터베이스의 조회, 추가, 삭제, 수정 등의 로직들이 모두 여기서 이루어지며, 이것을 통해 &lt;code>Template&lt;/code>을 동적으로 처리할 수 있다.&lt;/p></description></item><item><title>Til: Installation</title><link>http://Jeonghun-Ban.github.io/til/django/study/installation/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/installation/</guid><description>
&lt;h2 id="가상환경">가상환경&lt;/h2>
&lt;p>가상환경(Virtual Environment, venv)은 독립적인 파이썬 개발 환경을 생성하는 것으로, 특정 버전의 파이썬이나 라이브러리를 설치하여 사용한다. 이를 통해 여러 프로젝트를 효과적으로 관리하는 것이 가능하다.&lt;/p>
&lt;h3 id="생성-명령어">생성 명령어&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python -m venv &lt;span style="color:#e6db74">&amp;#34;가상환경 이름&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># MacOS or Linux의 경우 python3로 진행&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="실행-명령어">실행 명령어&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ source &lt;span style="color:#e6db74">&amp;#34;가상환경 이름&amp;#34;&lt;/span>/scripts/activate
$ source &lt;span style="color:#e6db74">&amp;#34;가상환경명&amp;#34;&lt;/span>/bin/activate
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="종료-명령어">종료 명령어&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ deactivate
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="장고-설치">장고 설치&lt;/h2>
&lt;p>효율적인 프로젝트 관리를 위해 장고는 가상환경 안에 설치해주는 것이 좋다. 장고는 pip(파이썬 패키지 관리 시스템)를 통해 설치한다.&lt;/p>
&lt;h3 id="설치-명령어">설치 명령어&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ pip install django
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="삭제-명령어">삭제 명령어&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ pip uninstall django
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Til: Create Project &amp; App</title><link>http://Jeonghun-Ban.github.io/til/django/study/create-project-and-app/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/create-project-and-app/</guid><description>
&lt;h2 id="project-생성">Project 생성&lt;/h2>
&lt;p>장고를 이용하여 개발을 진행하기 위해서는 프로젝트를 생성해야만 한다.&lt;/p>
&lt;blockquote>
&lt;p>프로젝트는 장고에서 개발 대상이 되는 프로그램들을 의미한다.&lt;/p>
&lt;/blockquote>
&lt;h3 id="준비">준비&lt;/h3>
&lt;p>프로젝트 생성에 앞서 장고가 설치된 가상환경이 준비되어 있어야 한다. 만약에 준비되어 있지 않다면 해당 &lt;a href="./Install-Django.md">링크&lt;/a>를 참고해서 가상환경을 만들어 주도록 하자.&lt;/p>
&lt;p>가상환경이 준비되었다면 아래 명령어로 가상환경을 실행한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ source &lt;span style="color:#e6db74">&amp;#34;가상환경명&amp;#34;&lt;/span>/scripts/activate
$ source &lt;span style="color:#e6db74">&amp;#34;가상환경명&amp;#34;&lt;/span>/bin/activate
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>윈도우의 경우 첫번째 명령어를, 맥이나 리눅스의 경우 아래 명령어를 사용한다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">(&lt;/span>env&lt;span style="color:#f92672">)&lt;/span> ~/django_workspace/project master $
&lt;/code>&lt;/pre>&lt;/div>&lt;p>정상적으로 가상환경을 실행했을 시 다음과 같이 쉘 상에 가상환경명이 표기된다.&lt;/p>
&lt;h3 id="명령어">명령어&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ django-admin startproject &lt;span style="color:#e6db74">&amp;#34;프로젝트명&amp;#34;&lt;/span> .
&lt;/code>&lt;/pre>&lt;/div>&lt;p>프로젝트를 생성하면 필요한 파일이나 디렉터리가 자동적으로 생성된다.&lt;/p>
&lt;pre>&lt;code>workspace(작업 디렉토리)
├── venv(가상환경)
├── manage.py
└── project
└── settings.py
urls.py
wsgi.py
__init__.py
&lt;/code>&lt;/pre>&lt;p>위는 트리 구조로 디렉토리와 파일을 나타낸 것이다.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>프로젝트를 생성하는 명령어에는 점(.)이 포함되는데, 이것의 의미는 현재 디렉토리(경로)에 프로젝트 관련 파일들을 생성하라는 의미다.&lt;/p>
&lt;blockquote>
&lt;p>명령어에서 점(.)은 현재 경로를 의미한다.&lt;/p>
&lt;/blockquote>
&lt;p>그렇다면 프로젝트를 생성하는 명령어에서 점(.)을 지정해주지 않는다면 어떻게 될까?&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ django-admin startproject &lt;span style="color:#e6db74">&amp;#34;project&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>workspace&lt;/code>라는 디렉토리에서 &lt;code>venv&lt;/code>라는 가상환경을 생성하여 작업 중이라 가정할때, &lt;code>project&lt;/code>라는 프로젝트를 점(.) 없이 생성한다면 다음과 같은 일이 벌어질 것이다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">workspace(작업 디렉토리)
├── venv(가상환경)
└── project*
├── manage.py
└── project
└── settings.py
urls.py
wsgi.py
&lt;span style="font-weight:bold">__init__&lt;/span>.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>점(.)을 붙이고 생성했을 때와는 달리 &lt;code>project&lt;/code>라는 이름의 폴더가 하나 더 있다는 것을 알 수 있다. (*로 표기된 것)&lt;/p>
&lt;p>이것이 크게 문제가 되는 것은 아니나, 명령어를 내리거나 프로젝트를 관리하는데 있어서 불편함을 야기하므로 되도록 점(.)을 사용하여 프로젝트를 생성하도록 하자.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="app-생성">App 생성&lt;/h2>
&lt;p>&lt;code>App&lt;/code>은 프로젝트의 구성단위로 보통 프로젝트 폴더가 생성된 경로에 동일하게 생성된다.&lt;/p>
&lt;h3 id="명령어-1">명령어&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python manage.py startapp &lt;span style="color:#e6db74">&amp;#34;App명&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="서버-작동">서버 작동&lt;/h2>
&lt;p>정상적으로 장고 프로젝트가 생성되었는지 확인하기 위해서는 서버를 작동시켜야 한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python manage.py runserver
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>MAC OS X와 Linux의 경우 python3 사용&lt;/p>
&lt;/blockquote>
&lt;p>위 명령어를 사용하면, 장고 프로젝트가 로컬에서 실행된다.&lt;/p>
&lt;p>&lt;img src="../image/localhost.png" alt="localhost">&lt;/p>
&lt;blockquote>
&lt;p>작동중인 로컬 서버는 로컬주소인 &lt;code>127.0.0.1:8000&lt;/code>에서 확인할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;p>서버 종료는 &lt;code>ctrl+c&lt;/code>로 할 수 있다.&lt;/p></description></item><item><title>Til: Run Server</title><link>http://Jeonghun-Ban.github.io/til/django/study/run-server/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/run-server/</guid><description>
&lt;p>앞서 프로젝트 및 앱 생성 과정을 알아보았으며, 이를 토대로 &lt;code>Hello Lion&lt;/code>을 출력하는 페이지를 만들어 보도록 할 것이다. 이 프로젝트는 장고를 시작하는 가장 쉬운 난이도의 프로젝트이기는 하나 장고를 배우는 것이 처음이라면 구조 자체가 복잡하게 느껴질 수 있다. 하지만 해당 프로젝트를 진행하면 장고의 전체적인 구조를 머리 속에 그리는 것이 가능할 것이다.&lt;/p>
&lt;h2 id="구현-과정">구현 과정&lt;/h2>
&lt;p>&lt;img src="../image/Structure.png" alt="Structure.png">&lt;/p>
&lt;p>&lt;code>Hello Lion&lt;/code>을 출력하는 장고 프로젝트를 구현 과정은 크게 4단계로 나누어 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%EC%95%B1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%97%B0%EA%B2%B0">앱 - 프로젝트 연결&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hello-lion-%EC%B6%9C%EB%A0%A5%ED%95%98%EB%8A%94-html-%EC%83%9D%EC%84%B1">&amp;ldquo;Hello Lion&amp;rdquo; 출력하는 html 생성&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9A%94%EC%B2%AD%EC%97%90-html%ED%8C%8C%EC%9D%BC%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1">사용자 요청에 html파일을 호출하는 함수 작성&lt;/a>&lt;/li>
&lt;li>&lt;a href="#url%EA%B3%BC-views-%EC%97%B0%EA%B2%B0">url과 views( 함수가 작성된 파일 ) 연결&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>이러한 구조는 장고 프로젝트의 기본이라 할 수 있는 것이므로 익혀두어야만 한다.&lt;/p>
&lt;blockquote>
&lt;p>장고 구조에 대해서 좀 더 알아보고 싶다면 &lt;a href="MTV-Pattern.md">MTV패턴&lt;/a> 글을 참고하자&lt;/p>
&lt;/blockquote>
&lt;h2 id="앱-프로젝트-연결">앱 프로젝트 연결&lt;/h2>
&lt;p>프로젝트를 시작하기 위해서는 프로젝트와 앱을 생성해야 한다. 이 작업에 필요한 명령어는 &lt;a href="Django-Project-Start.md">해당 글&lt;/a>에 작성해두었다. 하지만 앱은 생성했다고 해서 프로젝트에서 바로 사용할 수는 없고, 번거롭기는 하지만 앱을 프로젝트에 등록해야 한다.&lt;/p>
&lt;h3 id="앱-등록">앱 등록&lt;/h3>
&lt;p>&lt;a href="https://github.com/likelionmju/likelionmyongji_hellolion/blob/master/firstproject/settings.py">settings.py&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">INSTALLED_APPS &lt;span style="color:#f92672">=&lt;/span> [
&lt;span style="color:#e6db74">&amp;#39;django.contrib.admin&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;django.contrib.auth&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;django.contrib.sessions&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;django.contrib.messages&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;hellolion&amp;#39;&lt;/span>,
]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>앱을 등록하는 과정은 간단하다. 단지 프로젝트 디렉토리 안에 있는 &lt;code>settings.py&lt;/code>라는 파일에서 &lt;code>INSTALLED_APPS&lt;/code>라는 부분에 앱명을 작성해서 추가해주면 된다.&lt;/p>
&lt;blockquote>
&lt;p>주의!! 리스트 요소 마지막에는 콤마(,)를 붙이도록 한다. 안그러면 에러가 발생할 것이다..&lt;/p>
&lt;/blockquote>
&lt;h2 id="hello-lion-출력하는-html-생성">Hello Lion 출력하는 html 생성&lt;/h2>
&lt;p>장고에서 템플릿(Templates)은 사용자에게 보여지는 화면을 담당하는 부분이다. 보통 템플릿은 html을 말하며 이러한 포맷의 파일을 &lt;a href="https://github.com/likelionmju/likelionmyongji_hellolion/tree/master/hellolion/templates">templates&lt;/a>라는 디렉토리에 생성하면 우리가 보여주고 싶은 화면을 사용자에게 띄울 수 있다.&lt;/p>
&lt;blockquote>
&lt;p>templates라는 폴더는 자동으로 생성되지 않으며, 앱 폴더 내부에 직접 생성하면 된다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/likelionmju/likelionmyongji_hellolion/blob/master/hellolion/templates/home.html">home.html&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;Hello Lion!&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Hello Lion&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="사용자-요청에-html파일을-호출하는-함수-작성">사용자 요청에 html파일을 호출하는 함수 작성&lt;/h2>
&lt;p>뷰(View)는 데이터를 처리하는 함수들을 정의하는 부분이다. 여기서 템플릿(Template)이 사용자에게 어떻게 보여지게 할 지를 결정할 수 있다. 이번 프로젝트에서는 사용자 요청이 오면 html 파일을 특별한 가공없이 보여주기만 하는 함수를 작성해볼 것이다.&lt;/p>
&lt;p>&lt;a href="https://github.com/likelionmju/likelionmyongji_hellolion/blob/master/hellolion/views.py">views.py&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> django.shortcuts &lt;span style="color:#f92672">import&lt;/span> render
&lt;span style="color:#75715e"># Create your views here.&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">home&lt;/span>(request):
&lt;span style="color:#66d9ef">return&lt;/span> render(request, &lt;span style="color:#e6db74">&amp;#39;home.html&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>home이라는 함수는 요청이 오면 &lt;code>home.html&lt;/code>을 render라는 메서드를 통해서 반환시킨다.&lt;/p>
&lt;p>이는 사용자가 home이라는 함수를 호출하는 것으로 home.html을 볼 수 있다는 것과 같은 말이다.&lt;/p>
&lt;h2 id="url과-views-연결">url과 views 연결&lt;/h2>
&lt;p>이쯤되면 사용자가 어떻게 함수를 호출할 수 있는지 궁금해질 것이다. 그 해답은 바로 &lt;strong>url&lt;/strong>이다!!&lt;/p>
&lt;p>장고는 특정 url에 접속하면 특정 함수가 호출되도록 설정할 수 있으며 &lt;a href="https://github.com/likelionmju/likelionmyongji_hellolion/blob/master/firstproject/urls.py">urls.py&lt;/a> 파일에서 해당 설정이 이루어진다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> django.contrib &lt;span style="color:#f92672">import&lt;/span> admin
&lt;span style="color:#f92672">from&lt;/span> django.urls &lt;span style="color:#f92672">import&lt;/span> path
&lt;span style="color:#f92672">import&lt;/span> hellolion.views
urlpatterns &lt;span style="color:#f92672">=&lt;/span> [
path(&lt;span style="color:#e6db74">&amp;#39;admin/&amp;#39;&lt;/span>, admin&lt;span style="color:#f92672">.&lt;/span>site&lt;span style="color:#f92672">.&lt;/span>urls),
path(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, hellolion&lt;span style="color:#f92672">.&lt;/span>views&lt;span style="color:#f92672">.&lt;/span>home, name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;home&amp;#39;&lt;/span>),
]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 코드에서 &lt;code>urlpatterns&lt;/code>는 특정 url에서 어떤 함수를 사용할 것인지를 지정하는 부분이다. home이라는 함수가 최상위 주소('')에서 호출되도록 하기 위해서 &lt;code>path('', hellolion.views.home, name='home'),&lt;/code>라고 작성해주었다.&lt;/p>
&lt;blockquote>
&lt;p>주의!! urlpatterns에 요소를 추가할 떄도 마지막에 콜론(,)을 붙여주어야 한다.&lt;/p>
&lt;/blockquote>
&lt;h3 id="path">path&lt;/h3>
&lt;p>위 코드에서 &lt;code>urlpatterns&lt;/code>에 특정 url을 지정하기 위해서 path라는 것이 사용되었다. 좀 더 자세히 알아보자.&lt;/p>
&lt;pre>&lt;code>path('url', 'app명.views.함수명', name='path명')
&lt;/code>&lt;/pre>
&lt;p>path는 세 인자(url, 함수, 이름)를 받는다. 이를 통해서 url과 함수를 맵핑할 수 있으며, 세 번째 인자로 해당 url에 대한 이름을 지정하여 이후 장고 내에서 url 경로를 호출할 수 있다.&lt;/p>
&lt;blockquote>
&lt;p>세 번째 인자는 필수 속성은 아니다. 나중에 url을 간편하게 호출하기 위해서 사용한다.&lt;/p>
&lt;/blockquote>
&lt;h1 id="결과">결과&lt;/h1>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python manage.py runserver
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="../image/Hello-Lion.png" alt="Hello-Lion">&lt;/p>
&lt;p>서버를 작동하면, 로컬 호스트(http://127.0.0.1:8000/)에서 &lt;code>Hello Lion&lt;/code>이라는 문자를 브라우저에서 확인 할 수 있다!&lt;/p></description></item><item><title>Til: Extend Template</title><link>http://Jeonghun-Ban.github.io/til/django/study/extend-template/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/extend-template/</guid><description>
&lt;p>장고에서는 템플릿 상에서 중복되는 코드를 줄이게 도와주는 &lt;code>템플릿 상속&lt;/code>이라는 기능을 제공한다.&lt;/p>
&lt;p>방법&lt;/p>
&lt;ol>
&lt;li>중복되는 부분으로만 구성된 템플릿 생성&lt;/li>
&lt;li>해당 템플릿에서 공통되지 않게 하려는 부분만 &lt;code>{% block %}&lt;/code> 태그를 활용해서 감싼다.&lt;/li>
&lt;/ol>
&lt;p>예를 들어서 템플릿 하나를 재사용하는데 이때 달리하고 싶은 부분이 브라우저 탭 상에 출력되는 title이랑 body에 들어가는 내용이라 해보자&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;{% block title %}&lt;span style="color:#75715e">&amp;lt;!-- override --&amp;gt;&lt;/span>{% endblock %}&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;span style="color:#75715e">&amp;lt;!-- favicon.ico --&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;shortcut icon&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{% static &amp;#39;/page/images/favicon.ico&amp;#39; %}&amp;#34;&lt;/span>&amp;gt;
&lt;span style="color:#75715e">&amp;lt;!-- CSS Styles --&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{% static &amp;#39;/page/css/style.css&amp;#39; %}&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
{% block content %}
&lt;span style="color:#75715e">&amp;lt;!-- override --&amp;gt;&lt;/span>
{% endblock %}
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 템플릿은 이러한 경우에 활용할 수 있는 예시이다. 상속의 개념으로 보았을 때 해당 템플릿은 부모 템플릿이며, 이것을 기반으로 한 새로운 자식 템플릿을 생성하는 것도 가능하다.&lt;/p>
&lt;p>아래 템플릿은 위에서 작성한 &lt;code>base.html&lt;/code>을 상속하는 새로운 템플릿이다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!-- base.html을 상속한다는 것을 명시 --&amp;gt;&lt;/span>
{% extends &amp;#39;base.html&amp;#39; %}
{% block title %}
&lt;span style="color:#75715e">&amp;lt;!-- override --&amp;gt;&lt;/span>
{% endblock %}
{% block content %}
&lt;span style="color:#75715e">&amp;lt;!-- override --&amp;gt;&lt;/span>
{% endblock %}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>이렇게 작성해주기만 하면 부모 템플릿에서 작성한 코드를 작성하지 않더라도 동일하게 적용되며, &lt;code>{% block %}&lt;/code> 태그 사이에 코드를 작성하면 부모 템플릿과 공통된 부분을 공유하면서 차이가 있는 템플릿을 생성할 수 있다.&lt;/p></description></item><item><title>Til: Static &amp; Media</title><link>http://Jeonghun-Ban.github.io/til/django/study/static-and-media/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/static-and-media/</guid><description>
&lt;h2 id="정적-파일이란">정적 파일이란?&lt;/h2>
&lt;p>웹 사이트를 구성하는 &lt;code>html, css, script, image&lt;/code> 파일 등을 의미하는데 보통 장고에서는 정적 파일은 html을 제외한 &lt;code>css, js, image&lt;/code> 파일을 말한다.&lt;/p>
&lt;h2 id="django-정적-파일-유형">django 정적 파일 유형&lt;/h2>
&lt;p>장고에서 정적파일을 사용하는 방법에는 두 가지가 존재한다.&lt;/p>
&lt;ol>
&lt;li>static - 페이지에서 사용하는 기본적인 파일&lt;/li>
&lt;li>media - 유저가 서비스를 이용하는 중에 발생하는 파일&lt;/li>
&lt;/ol>
&lt;p>풀어서 설명하면 개발단계에서부터 정의되는 파일들이 &lt;code>static&lt;/code>이고, 개발자가 아닌 이용자가 서비스를 이용하는 과정에서 발생하는 데이터(업로드 등)를 바로 &lt;code>media&lt;/code>이다.&lt;/p>
&lt;h2 id="정적-파일-사용법">정적 파일 사용법&lt;/h2>
&lt;h3 id="static">static&lt;/h3>
&lt;ul>
&lt;li>&lt;code>STATICFILES_DIRS&lt;/code> : 개발 단게에서 사용하는 정적 파일 위치를 나타냄&lt;/li>
&lt;li>&lt;code>STATIC_URL&lt;/code> : Static 파일에 접근하기 위한 url&lt;/li>
&lt;li>&lt;code>STATIC_ROOT&lt;/code> : 실제 서비스 운영 중에 사용되는 정적 파일 위치를 나타냄&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># settings.py&lt;/span>
STATIC_URL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/static/&amp;#39;&lt;/span>
STATICFILES_DIRS &lt;span style="color:#f92672">=&lt;/span> [
os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(BASE_DIR, &lt;span style="color:#e6db74">&amp;#39;app_name&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;static&amp;#39;&lt;/span>),
]
STATIC_ROOT &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(BASE_DIR, &lt;span style="color:#e6db74">&amp;#39;static&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Shell에서 &lt;code>python manage.py collectstatic&lt;/code> 명령어 실행&lt;/p>
&lt;blockquote>
&lt;p>staticfiles_dirs에서 static_root 경로로 옮김&lt;/p>
&lt;/blockquote>
&lt;h3 id="media">media&lt;/h3>
&lt;ul>
&lt;li>&lt;code>MEDIA_URL&lt;/code> : Media 파일에 접근하기 위한 url&lt;/li>
&lt;li>&lt;code>MEDIA_ROOT&lt;/code> : 업로드되는 파일이 저장되는 위치&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># settings.py&lt;/span>
MEDIA_URL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/media/&amp;#39;&lt;/span>
MEDIA_ROOT&lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(BASE_DIR, &lt;span style="color:#e6db74">&amp;#39;media&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># urls.py&lt;/span>
&lt;span style="color:#f92672">from&lt;/span> django.conf &lt;span style="color:#f92672">import&lt;/span> settings
&lt;span style="color:#f92672">from&lt;/span> django.conf.urls.static &lt;span style="color:#f92672">import&lt;/span> static
urlpatterns &lt;span style="color:#f92672">+=&lt;/span> static(&lt;span style="color:#e6db74">&amp;#39;/media/&amp;#39;&lt;/span>, document_root&lt;span style="color:#f92672">=&lt;/span>settings&lt;span style="color:#f92672">.&lt;/span>MEDIA_ROOT)
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Til: Image Field</title><link>http://Jeonghun-Ban.github.io/til/django/study/image-field/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/image-field/</guid><description>
&lt;p>이미지를 업로드할 수 있는 모델을 생성하기 위해서는 우선적으로 media 설정이 필요하다. 만약 진행하지 않았다면 해당 &lt;a href="%5Cstatic-and-media.md">링크&lt;/a>를 참고하여 진행하도록 한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># models.py&lt;/span>
&lt;span style="color:#f92672">from&lt;/span> django.conf &lt;span style="color:#f92672">import&lt;/span> settings
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Post&lt;/span>(models&lt;span style="color:#f92672">.&lt;/span>Model):
image &lt;span style="color:#f92672">=&lt;/span> models&lt;span style="color:#f92672">.&lt;/span>ImageField(upload_to&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;images/&amp;#39;&lt;/span>, blank&lt;span style="color:#f92672">=&lt;/span>True)
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>해당 소스코드가 사용된 전체 코드는 &lt;a href="https://github.com/likelionmju/likelionmyongji_lionstagram/blob/master/page/models.py">다음 주소&lt;/a>를 통해서 확인해볼 수 있다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>Post&lt;/code>라는 글을 작성하기 위한 모델에 &lt;code>image&lt;/code>라는 필드를 만들었다. 여기에는 models 클래스의 ImageField 메소드가 사용된다.&lt;/p>
&lt;blockquote>
&lt;p>upload_to 속성은 이미지 업로드 시 경로를 의미하며, settings.py에서 설정한 media 경로가 기준인 상대 경로를 말한다.&lt;/p>
&lt;/blockquote>
&lt;p>만약 모델이 수정되었으면 마이그레이션을 해주어야 한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>python manage.py makemigrations&lt;/code>&lt;/li>
&lt;li>&lt;code>python manage.py migrate&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>이후 이미지를 활용하기 위한 파이썬 패키지를 설치한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>pip install pillow&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>이제 파일 업로드가 가능하게 되었을 것이다. 템플릿 상에서 위 모델로 생성된 글의 이미지를 출력하려 한다면 다음과 같이 사용하면 된다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">img&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{post.image.url}}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">alt&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>&amp;gt;
&lt;span style="color:#75715e">&amp;lt;!-- post는 Post로 생성된 객체 하나를 의미--&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Til: Create New Post</title><link>http://Jeonghun-Ban.github.io/til/django/study/create-new-post/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/create-new-post/</guid><description>
&lt;h2 id="post-form">Post Form&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{% extends &amp;#39;base.html&amp;#39; %}
{% block content %}
&amp;lt;&lt;span style="color:#f92672">br&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">form&lt;/span> &lt;span style="color:#a6e22e">action&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{% url &amp;#39;new&amp;#39; %}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;POST&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">enctype&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;multipart/form-data&amp;#34;&lt;/span>&amp;gt;
{% csrf_token %}
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;file&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;image&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">br&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">textarea&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">cols&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;50&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span> &amp;gt;&amp;lt;/&lt;span style="color:#f92672">textarea&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">br&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;submit&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;글쓰기&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">form&lt;/span>&amp;gt;
{% endblock %}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;lt;주요 개념&amp;gt;&lt;/p>
&lt;ul>
&lt;li>&lt;a href="%5CGET-POST.md">GET/POST&lt;/a>&lt;/li>
&lt;li>&lt;a href="%5Ccsrf-token.md">csrf-token&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="url-path">Url path&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">urlpatterns &lt;span style="color:#f92672">=&lt;/span> [
path(&lt;span style="color:#e6db74">&amp;#39;new&amp;#39;&lt;/span>, page&lt;span style="color:#f92672">.&lt;/span>views&lt;span style="color:#f92672">.&lt;/span>new, name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;new&amp;#39;&lt;/span>),
&lt;span style="color:#f92672">...&lt;/span>
]
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="view">View&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> django.shortcuts &lt;span style="color:#f92672">import&lt;/span> redirect
&lt;span style="color:#f92672">from&lt;/span> django.utils &lt;span style="color:#f92672">import&lt;/span> timezone
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">new&lt;/span>(request):
&lt;span style="color:#66d9ef">if&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>method &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>:
post &lt;span style="color:#f92672">=&lt;/span> Post()
post&lt;span style="color:#f92672">.&lt;/span>author &lt;span style="color:#f92672">=&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>user
post&lt;span style="color:#f92672">.&lt;/span>content &lt;span style="color:#f92672">=&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>POST[&lt;span style="color:#e6db74">&amp;#39;content&amp;#39;&lt;/span>]
&lt;span style="color:#75715e"># image 파일이 있으면 post 객체에 저장&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>FILES:
post&lt;span style="color:#f92672">.&lt;/span>image &lt;span style="color:#f92672">=&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>FILES[&lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span>]
post&lt;span style="color:#f92672">.&lt;/span>pub_date &lt;span style="color:#f92672">=&lt;/span> timezone&lt;span style="color:#f92672">.&lt;/span>datetime&lt;span style="color:#f92672">.&lt;/span>now()
post&lt;span style="color:#f92672">.&lt;/span>save()
&lt;span style="color:#66d9ef">return&lt;/span> redirect(&lt;span style="color:#e6db74">&amp;#39;/detail/&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>str(post&lt;span style="color:#f92672">.&lt;/span>id))
&lt;span style="color:#66d9ef">return&lt;/span> render(request, &lt;span style="color:#e6db74">&amp;#39;new.html&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Til: CSRF Token</title><link>http://Jeonghun-Ban.github.io/til/django/study/csrf-token/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/csrf-token/</guid><description>
&lt;p>CSRF란 사이트 간 요청 위조(Closs-site request forgery)라는 웹사이트 취약점 공격 중 하나를 의미한다. 사용자가 자신의 의지와는 무관하게 공격자가 의도한 행위(수정, 삭제, 등록)를 특정 웹사이트에 요청하는 것이다.&lt;/p>
&lt;p>옥션의 1800만명 개인 정보 유출 사고는 CSRF 공격의 대표적인 사례이다. 당시 중국 해커는 서버를 공격하는 것이 아니라 옥션 운영진을 대상으로 악성 코드를 첨부한 메일을 전송했는데, 이를 통해서 공격을 감행했다.&lt;/p>
&lt;p>보통 우리는 정보 탈취를 막기 위해서 GET 방식이 아닌 POST 방식의 통신을 사용한다. 하지만 위와 같은 CSRF 공격을 이용하면 POST 방식도 안전하지 않다. 그러므로 POST방식을 더욱 안전히 사용하기 위해서는 CSRF에 대응할 수 있는 방안이 필요한 것이다.&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->CSRF 공격 대처방안 = CSRF 토큰&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> &lt;span style="color:#f92672">&amp;lt;&lt;/span>form action&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> method&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
{&lt;span style="color:#f92672">%&lt;/span> csrf_token &lt;span style="color:#f92672">%&lt;/span>}
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>장고는 이러한 CSRF 공격을 막기위해서 CSRF 토큰이라는 것을 사용한다.
사용하는 방법은 POST 방식으로 데이터를 전송하는 템플릿 폼에 &lt;code>{% csrf_token %}&lt;/code>을 써주기만 하면 된다.&lt;/p></description></item><item><title>Til: GET/POST</title><link>http://Jeonghun-Ban.github.io/til/django/study/get-and-post/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/get-and-post/</guid><description>
&lt;p>HTTP 통신 프로토콜을 통해서 정보를 주고받는 방식에는 여러가지가 있지만, 보통 GET과 POST 두가지를 많이 사용한다.&lt;/p>
&lt;h2 id="get과-post-차이">GET과 POST 차이&lt;/h2>
&lt;p>GET방식은 데이터를 전송할 때, 주소에 담아서 전송한다. 이전에 로또 프로젝트를 했을 때, 숫자를 전송하는 과정이 있었는데 이때 사용되었던 방식이다. 만약에 1부터 6까지 입력해서 전송하면 아래와 같이 데이터가 전송된다.&lt;/p>
&lt;pre>&lt;code>127.0.0.1:8000/?number1=1&amp;amp;number2=2&amp;amp;number3=3&amp;amp;number4=4&amp;amp;number5=5&amp;amp;number6=6
&lt;/code>&lt;/pre>
&lt;p>이러한 방식으로 인해 어떤 데이터가 전송되는지 알수 있다는 점에서 정보 탈취에 취약하다.&lt;/p>
&lt;p>반면 POST방식은 GET과 달리 주소를 통해서 어떤 정보가 전달되었는지 알 수 없다. 왜냐하면 헤더의 BODY 안에 담겨서 전송이 되기 때문이다.&lt;/p>
&lt;h2 id="post-전송-타입-설정">POST 전송 타입 설정&lt;/h2>
&lt;p>POST는 데이터 전송에 대한 컨텐츠 타입 설정이 존재한다.&lt;/p>
&lt;p>그 종류는 아래와 같이 3가지로 나누어진다.&lt;/p>
&lt;pre>&lt;code>1. application/x-www-form-urlencoded
2. text/plain
3. multipart/form-data
&lt;/code>&lt;/pre>
&lt;p>일반적인 경우 1번 방식으로 전송되는데, 이때 전송되는 데이터는 GET과 같은 방식으로 key와 value 쌍으로 구성된다. 그리고 2번은 단순 txt로 전송하는 방법이다.&lt;/p>
&lt;p>3번은 파일 전송을 위해서 사용하는 것으로 바이너리 데이터를 사용한다는 것을 명시해주는 것이다.&lt;/p>
&lt;p>보통 이러한 설정은 파일을 전송하기 위해서 해주는 경우가 많은데, 이럴 때 form태그 속성으로 &lt;code>enctype=&amp;quot;multipart/form-data&amp;quot;&lt;/code>를 써주면 된다.&lt;/p>
&lt;p>2번은 거의 사용할 일이 없으며, 1번의 경우는 자동적으로 설정되므로 위 설정만 기억해두면 될 것이다.&lt;/p>
&lt;h2 id="적절한-http-프로토콜-사용-예">적절한 HTTP 프로토콜 사용 예&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>GET: 데이터를 조회할 때! ex) 게시글 조회&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POST: 데이터를 전송하는데, 정보가 밖으로 들어나서는 안되는 경우 &lt;!-- raw HTML omitted -->
ex) 회원가입, 로그인, 글 작성/수정&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Til: Update &amp; Delete Post</title><link>http://Jeonghun-Ban.github.io/til/django/study/update-and-delete-post/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>http://Jeonghun-Ban.github.io/til/django/study/update-and-delete-post/</guid><description>
&lt;h2 id="delete">Delete&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># urls.py&lt;/span>
urlpatterns &lt;span style="color:#f92672">=&lt;/span> [
path(&lt;span style="color:#e6db74">&amp;#39;delete/&amp;lt;int:post_id&amp;gt;&amp;#39;&lt;/span>, views&lt;span style="color:#f92672">.&lt;/span>post_delete, name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;post_delete&amp;#39;&lt;/span>),
&lt;span style="color:#f92672">...&lt;/span>
]
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># views.py&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">post_delete&lt;/span>(request, post_id):
post &lt;span style="color:#f92672">=&lt;/span> get_object_or_404(Post, pk&lt;span style="color:#f92672">=&lt;/span>post_id)
&lt;span style="color:#66d9ef">if&lt;/span> post&lt;span style="color:#f92672">.&lt;/span>author &lt;span style="color:#f92672">==&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>user:
post&lt;span style="color:#f92672">.&lt;/span>delete()
&lt;span style="color:#66d9ef">return&lt;/span> redirect(&lt;span style="color:#e6db74">&amp;#39;home&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> redirect(&lt;span style="color:#e6db74">&amp;#39;post_detail&amp;#39;&lt;/span>, post_id)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="update">Update&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># urls.py&lt;/span>
urlpatterns &lt;span style="color:#f92672">=&lt;/span> [
path(&lt;span style="color:#e6db74">&amp;#39;edit/&amp;lt;int:post_id&amp;gt;&amp;#39;&lt;/span>, views&lt;span style="color:#f92672">.&lt;/span>post_edit, name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;post_edit&amp;#39;&lt;/span>),
&lt;span style="color:#f92672">...&lt;/span>
]
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># views.py&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">post_edit&lt;/span>(request, post_id):
post &lt;span style="color:#f92672">=&lt;/span> get_object_or_404(Post, pk&lt;span style="color:#f92672">=&lt;/span>post_id)
&lt;span style="color:#75715e"># 수정 폼 제출&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>method &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>:
post&lt;span style="color:#f92672">.&lt;/span>content &lt;span style="color:#f92672">=&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>POST[&lt;span style="color:#e6db74">&amp;#39;content&amp;#39;&lt;/span>]
&lt;span style="color:#75715e"># image 파일이 있으면 post 객체에 저장&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>FILES:
post&lt;span style="color:#f92672">.&lt;/span>image &lt;span style="color:#f92672">=&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>FILES[&lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span>]
post&lt;span style="color:#f92672">.&lt;/span>save()
&lt;span style="color:#66d9ef">return&lt;/span> redirect(&lt;span style="color:#e6db74">&amp;#39;/post/&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>str(post&lt;span style="color:#f92672">.&lt;/span>id))
&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;span style="color:#75715e"># 수정 폼&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> post&lt;span style="color:#f92672">.&lt;/span>author &lt;span style="color:#f92672">==&lt;/span> request&lt;span style="color:#f92672">.&lt;/span>user:
&lt;span style="color:#66d9ef">return&lt;/span> render(request, &lt;span style="color:#e6db74">&amp;#39;post_edit.html&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;post&amp;#39;&lt;/span>: post})
&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> redirect(&lt;span style="color:#e6db74">&amp;#39;home&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>