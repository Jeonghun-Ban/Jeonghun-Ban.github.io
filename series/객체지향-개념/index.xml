<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>객체지향 개념 on Jeonghun's blog</title><link>https://jeonghun-ban.github.io/series/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EA%B0%9C%EB%85%90/</link><description>Recent content in 객체지향 개념 on Jeonghun's blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>junghoon.ban@gmail.com (Jeonghun)</managingEditor><webMaster>junghoon.ban@gmail.com (Jeonghun)</webMaster><copyright>©{year}, All Rights Reserved</copyright><lastBuildDate>Sun, 10 Jan 2021 19:53:10 +0900</lastBuildDate><atom:link href="https://jeonghun-ban.github.io/series/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EA%B0%9C%EB%85%90/index.xml" rel="self" type="application/rss+xml"/><item><title>[OOP] 객체지향 설계 원칙: SOLID 원칙</title><link>https://jeonghun-ban.github.io/posts/oop/solid-principle/</link><pubDate>Sun, 10 Jan 2021 19:53:10 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sun, 10 Jan 2021 19:53:10 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/oop/solid-principle/</guid><description>단일 책임 원칙(SRP) 단일 책임 원칙(Single Responsiblity Principle, SRP): 단 하나의 책임만 가져야 한다는 원칙 책임의 의미 SRP에서 말하는 책임의 기본 단위는 객체를 지칭한다</description><dc:creator>Jeonghun</dc:creator><category>OOP</category><category>JAVA</category><category>OOP</category><category>객체지향 개념</category></item><item><title>[OOP] 객체지향 프로그래밍(OOP) 특징</title><link>https://jeonghun-ban.github.io/posts/oop/oop-features/</link><pubDate>Sat, 09 Jan 2021 17:18:32 +0900</pubDate><author>junghoon.ban@gmail.com (Jeonghun)</author><atom:modified>Sat, 09 Jan 2021 17:18:32 +0900</atom:modified><guid>https://jeonghun-ban.github.io/posts/oop/oop-features/</guid><description>추상화(Abstraction) 구체적인 사물들의 공통적인 특징을 파악해서 하나의 개념으로 다루는 수단이다. 즉 복잡한 자료, 모듈, 시스템 등으로부터 핵심</description><dc:creator>Jeonghun</dc:creator><category>OOP</category><category>Java</category><category>OOP</category><category>객체지향 개념</category></item></channel></rss>